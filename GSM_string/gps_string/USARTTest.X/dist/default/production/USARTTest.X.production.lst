

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Mar 22 14:48:14 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000D                     	;# 
    47  000E                     	;# 
    48  000E                     	;# 
    49  000F                     	;# 
    50  0010                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001D                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  0088                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  008F                     	;# 
    78  0090                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0093                     	;# 
    83  0093                     	;# 
    84  0094                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0097                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  0105                     	;# 
    97  0107                     	;# 
    98  0108                     	;# 
    99  0109                     	;# 
   100  010C                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  0185                     	;# 
   106  0187                     	;# 
   107  0188                     	;# 
   108  0189                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  008F                     	;# 
   156  0090                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0093                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0095                     	;# 
   164  0096                     	;# 
   165  0097                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  0105                     	;# 
   175  0107                     	;# 
   176  0108                     	;# 
   177  0109                     	;# 
   178  010C                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  0185                     	;# 
   184  0187                     	;# 
   185  0188                     	;# 
   186  0189                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  000E                     	;# 
   205  000F                     	;# 
   206  0010                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0013                     	;# 
   210  0014                     	;# 
   211  0015                     	;# 
   212  0015                     	;# 
   213  0016                     	;# 
   214  0017                     	;# 
   215  0018                     	;# 
   216  0019                     	;# 
   217  001A                     	;# 
   218  001B                     	;# 
   219  001B                     	;# 
   220  001C                     	;# 
   221  001D                     	;# 
   222  001E                     	;# 
   223  001F                     	;# 
   224  0081                     	;# 
   225  0085                     	;# 
   226  0086                     	;# 
   227  0087                     	;# 
   228  0088                     	;# 
   229  0089                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  008F                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0093                     	;# 
   238  0093                     	;# 
   239  0093                     	;# 
   240  0094                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009C                     	;# 
   249  009D                     	;# 
   250  009E                     	;# 
   251  009F                     	;# 
   252  0105                     	;# 
   253  0107                     	;# 
   254  0108                     	;# 
   255  0109                     	;# 
   256  010C                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  010E                     	;# 
   260  010F                     	;# 
   261  0185                     	;# 
   262  0187                     	;# 
   263  0188                     	;# 
   264  0189                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  000E                     	;# 
   283  000F                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0013                     	;# 
   288  0014                     	;# 
   289  0015                     	;# 
   290  0015                     	;# 
   291  0016                     	;# 
   292  0017                     	;# 
   293  0018                     	;# 
   294  0019                     	;# 
   295  001A                     	;# 
   296  001B                     	;# 
   297  001B                     	;# 
   298  001C                     	;# 
   299  001D                     	;# 
   300  001E                     	;# 
   301  001F                     	;# 
   302  0081                     	;# 
   303  0085                     	;# 
   304  0086                     	;# 
   305  0087                     	;# 
   306  0088                     	;# 
   307  0089                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  008E                     	;# 
   311  008F                     	;# 
   312  0090                     	;# 
   313  0091                     	;# 
   314  0092                     	;# 
   315  0093                     	;# 
   316  0093                     	;# 
   317  0093                     	;# 
   318  0094                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  009F                     	;# 
   330  0105                     	;# 
   331  0107                     	;# 
   332  0108                     	;# 
   333  0109                     	;# 
   334  010C                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  010F                     	;# 
   339  0185                     	;# 
   340  0187                     	;# 
   341  0188                     	;# 
   342  0189                     	;# 
   343  018C                     	;# 
   344  018D                     	;# 
   345                           
   346                           	psect	idataBANK0
   347  03F8                     __pidataBANK0:	
   348                           
   349                           ;initializer for main@F2190
   350  03F8  346D               	retlw	109
   351  03F9  3465               	retlw	101
   352  03FA  3465               	retlw	101
   353  03FB  3472               	retlw	114
   354  03FC  3461               	retlw	97
   355  03FD  3400               	retlw	0
   356  03FE  3400               	retlw	0
   357  03FF  3400               	retlw	0
   358  0400  3400               	retlw	0
   359  0401  3400               	retlw	0
   360                           
   361                           	psect	nvCOMMON
   362  0079                     __pnvCOMMON:	
   363  0079                     _UQEnd:	
   364  0079                     	ds	1
   365  007A                     _UQFront:	
   366  007A                     	ds	1
   367  000C                     _PIR1bits	set	12
   368  0007                     _PORTCbits	set	7
   369  0008                     _PORTD	set	8
   370  001A                     _RCREG	set	26
   371  0018                     _RCSTAbits	set	24
   372  0019                     _TXREG	set	25
   373  005F                     _GIE	set	95
   374  005E                     _PEIE	set	94
   375  0031                     _RB1	set	49
   376  003C                     _RC4	set	60
   377  0065                     _RCIF	set	101
   378  0042                     _RD2	set	66
   379  0043                     _RD3	set	67
   380  0099                     _SPBRG	set	153
   381  0087                     _TRISCbits	set	135
   382  0088                     _TRISD	set	136
   383  0098                     _TXSTAbits	set	152
   384  0465                     _RCIE	set	1125
   385                           
   386                           	psect	strings
   387  028F                     __pstrings:	
   388  028F                     stringtab:	
   389  028F                     __stringtab:	
   390                           
   391                           ;	String table - string pointers are 1 byte each
   392  028F  1BFF               	btfsc	btemp+1,7
   393  0290  2A99               	ljmp	stringcode
   394  0291  1383               	bcf	3,7
   395  0292  187F               	btfsc	btemp+1,0
   396  0293  1783               	bsf	3,7
   397  0294  0800               	movf	0,w
   398  0295  0A84               	incf	4,f
   399  0296  1903               	skipnz
   400  0297  0AFF               	incf	btemp+1,f
   401  0298  0008               	return
   402  0299                     stringcode:	
   403  0299                     stringdir:	
   404  0299  3002               	movlw	high stringdir
   405  029A  008A               	movwf	10
   406  029B  0804               	movf	4,w
   407  029C  0A84               	incf	4,f
   408  029D  0782               	addwf	2,f
   409  029E                     __stringbase:	
   410  029E  3400               	retlw	0
   411  029F                     __end_of__stringtab:	
   412  029F                     STR_2:	
   413  029F  3448               	retlw	72	;'H'
   414  02A0  3469               	retlw	105	;'i'
   415  02A1  3469               	retlw	105	;'i'
   416  02A2  342E               	retlw	46	;'.'
   417  02A3  342E               	retlw	46	;'.'
   418  02A4  3420               	retlw	32	;' '
   419  02A5  3442               	retlw	66	;'B'
   420  02A6  346C               	retlw	108	;'l'
   421  02A7  3475               	retlw	117	;'u'
   422  02A8  3465               	retlw	101	;'e'
   423  02A9  3474               	retlw	116	;'t'
   424  02AA  346F               	retlw	111	;'o'
   425  02AB  346F               	retlw	111	;'o'
   426  02AC  3474               	retlw	116	;'t'
   427  02AD  3468               	retlw	104	;'h'
   428  02AE  3420               	retlw	32	;' '
   429  02AF  3469               	retlw	105	;'i'
   430  02B0  3473               	retlw	115	;'s'
   431  02B1  3420               	retlw	32	;' '
   432  02B2  3472               	retlw	114	;'r'
   433  02B3  3465               	retlw	101	;'e'
   434  02B4  3461               	retlw	97	;'a'
   435  02B5  3464               	retlw	100	;'d'
   436  02B6  3479               	retlw	121	;'y'
   437  02B7  340D               	retlw	13
   438  02B8  340A               	retlw	10
   439  02B9  3400               	retlw	0
   440  02BA                     STR_1:	
   441  02BA  3477               	retlw	119	;'w'
   442  02BB  3465               	retlw	101	;'e'
   443  02BC  346C               	retlw	108	;'l'
   444  02BD  3463               	retlw	99	;'c'
   445  02BE  346F               	retlw	111	;'o'
   446  02BF  346D               	retlw	109	;'m'
   447  02C0  3465               	retlw	101	;'e'
   448  02C1  3400               	retlw	0
   449  02C2                     STR_4:	
   450  02C2  3446               	retlw	70	;'F'
   451  02C3  346C               	retlw	108	;'l'
   452  02C4  3461               	retlw	97	;'a'
   453  02C5  3467               	retlw	103	;'g'
   454  02C6  3473               	retlw	115	;'s'
   455  02C7  3465               	retlw	101	;'e'
   456  02C8  3474               	retlw	116	;'t'
   457  02C9  3400               	retlw	0
   458  02B7                     
   459                           ; #config settings
   460  0000                     
   461                           	psect	cinit
   462  0015                     start_initialization:	
   463  0015                     __initialization:	
   464                           
   465                           ; Clear objects allocated to BANK0
   466  0015  01D6               	clrf	__pbssBANK0& (0+127)
   467  0016  01D7               	clrf	(__pbssBANK0+1)& (0+127)
   468  0017  01D8               	clrf	(__pbssBANK0+2)& (0+127)
   469  0018  01D9               	clrf	(__pbssBANK0+3)& (0+127)
   470  0019  01DA               	clrf	(__pbssBANK0+4)& (0+127)
   471                           
   472                           ; Clear objects allocated to BANK1
   473  001A  1383               	bcf	3,7	;select IRP bank0
   474  001B  30A0               	movlw	low __pbssBANK1
   475  001C  0084               	movwf	4
   476  001D  30E0               	movlw	low (__pbssBANK1+64)
   477  001E  120A  118A  2414  120A  118A  	fcall	clear_ram0
   478                           
   479                           ; Initialize objects allocated to BANK0
   480  0023  3056               	movlw	low (__pdataBANK0+10)
   481  0024  00FD               	movwf	btemp+-1
   482  0025  3003               	movlw	high __pidataBANK0
   483  0026  00FE               	movwf	btemp
   484  0027  30F8               	movlw	low __pidataBANK0
   485  0028  00FF               	movwf	btemp+1
   486  0029  304C               	movlw	low __pdataBANK0
   487  002A  0084               	movwf	4
   488  002B  120A  118A  23CA   	fcall	init_ram0
   489  002E                     end_of_initialization:	
   490                           ;End of C runtime variable initialization code
   491                           
   492  002E                     __end_of__initialization:	
   493  002E  0183               	clrf	3
   494  002F  120A  118A  2832   	ljmp	_main	;jump to C main() function
   495                           
   496                           	psect	bssBANK0
   497  0056                     __pbssBANK0:	
   498  0056                     USARTWriteInt@F1700:	
   499  0056                     	ds	5
   500                           
   501                           	psect	dataBANK0
   502  004C                     __pdataBANK0:	
   503  004C                     main@F2190:	
   504  004C                     	ds	10
   505                           
   506                           	psect	bssBANK1
   507  00A0                     __pbssBANK1:	
   508  00A0                     _URBuff:	
   509  00A0                     	ds	64
   510                           
   511                           	psect	clrtext
   512  0414                     clear_ram0:	
   513                           ;	Called with FSR containing the base address, and
   514                           ;	W with the last address+1
   515                           
   516  0414  0064               	clrwdt	;clear the watchdog before getting into this loop
   517  0415                     clrloop0:	
   518  0415  0180               	clrf	0	;clear RAM location pointed to by FSR
   519  0416  0A84               	incf	4,f	;increment pointer
   520  0417  0604               	xorwf	4,w	;XOR with final address
   521  0418  1903               	btfsc	3,2	;have we reached the end yet?
   522  0419  3400               	retlw	0	;all done for this memory range, return
   523  041A  0604               	xorwf	4,w	;XOR again to restore value
   524  041B  2C15               	goto	clrloop0	;do the next byte
   525                           
   526                           	psect	inittext
   527  03C6                     init_fetch0:	
   528                           ;	Called with low address in FSR and high address in W
   529                           
   530  03C6  087E               	movf	126,w
   531  03C7  008A               	movwf	10
   532  03C8  087F               	movf	127,w
   533  03C9  0082               	movwf	2
   534  03CA                     init_ram0:	
   535                           ;Called with:
   536                           ;	high address of idata address in btemp 
   537                           ;	low address of idata address in btemp+1 
   538                           ;	low address of data in FSR
   539                           ;	high address + 1 of data in btemp-1
   540                           
   541  03CA  23C6  120A  118A   	fcall	init_fetch0
   542  03CD  0080               	movwf	0
   543  03CE  0A84               	incf	4,f
   544  03CF  0804               	movf	4,w
   545  03D0  067D               	xorwf	125,w
   546  03D1  1903               	btfsc	3,2
   547  03D2  3400               	retlw	0
   548  03D3  0AFF               	incf	127,f
   549  03D4  1903               	btfsc	3,2
   550  03D5  0AFE               	incf	126,f
   551  03D6  2BCA               	goto	init_ram0
   552                           
   553                           	psect	cstackCOMMON
   554  0070                     __pcstackCOMMON:	
   555  0070                     ?_LCDEnable:	
   556  0070                     ?_LCDInitialize:	
   557                           ; 0 bytes @ 0x0
   558                           
   559  0070                     ?_LCDWriteString:	
   560                           ; 0 bytes @ 0x0
   561                           
   562  0070                     ?_LCDWriteCommand:	
   563                           ; 0 bytes @ 0x0
   564                           
   565  0070                     ?_LCDWriteData:	
   566                           ; 0 bytes @ 0x0
   567                           
   568  0070                     ?_LCDWriteByte:	
   569                           ; 0 bytes @ 0x0
   570                           
   571  0070                     ?_LCDReset:	
   572                           ; 0 bytes @ 0x0
   573                           
   574  0070                     ?_USARTWriteChar:	
   575                           ; 0 bytes @ 0x0
   576                           
   577  0070                     ?_USARTHandleRxInt:	
   578                           ; 0 bytes @ 0x0
   579                           
   580  0070                     ??_USARTHandleRxInt:	
   581                           ; 0 bytes @ 0x0
   582                           
   583  0070                     ?_main:	
   584                           ; 0 bytes @ 0x0
   585                           
   586  0070                     ?_ISR:	
   587                           ; 0 bytes @ 0x0
   588                           
   589  0070                     ?_USARTReadData:	
   590                           ; 0 bytes @ 0x0
   591                           
   592  0070                     ?_USARTDataAvailable:	
   593                           ; 1 bytes @ 0x0
   594                           
   595                           
   596                           ; 1 bytes @ 0x0
   597  0070                     	ds	4
   598  0074                     USARTHandleRxInt@data:	
   599                           
   600                           ; 1 bytes @ 0x4
   601  0074                     	ds	1
   602  0075                     ??_ISR:	
   603                           
   604                           ; 0 bytes @ 0x5
   605  0075                     	ds	4
   606                           
   607                           	psect	cstackBANK0
   608  0020                     __pcstackBANK0:	
   609  0020                     ??_LCDEnable:	
   610  0020                     ?_USARTInit:	
   611                           ; 0 bytes @ 0x0
   612                           
   613  0020                     ??_USARTWriteChar:	
   614                           ; 0 bytes @ 0x0
   615                           
   616  0020                     ??_USARTReadData:	
   617                           ; 0 bytes @ 0x0
   618                           
   619  0020                     ??_USARTDataAvailable:	
   620                           ; 0 bytes @ 0x0
   621                           
   622  0020                     ?_strncmp:	
   623                           ; 0 bytes @ 0x0
   624                           
   625  0020                     USARTWriteChar@ch:	
   626                           ; 2 bytes @ 0x0
   627                           
   628  0020                     strncmp@s2:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0020                     USARTInit@baud_rate:	
   632                           ; 1 bytes @ 0x0
   633                           
   634                           
   635                           ; 2 bytes @ 0x0
   636  0020                     	ds	1
   637  0021                     ?_USARTWriteString:	
   638  0021                     USARTReadData@data:	
   639                           ; 0 bytes @ 0x1
   640                           
   641  0021                     USARTWriteString@str:	
   642                           ; 1 bytes @ 0x1
   643                           
   644  0021                     strncmp@len:	
   645                           ; 2 bytes @ 0x1
   646                           
   647                           
   648                           ; 2 bytes @ 0x1
   649  0021                     	ds	1
   650  0022                     ??_LCDWriteByte:	
   651  0022                     ??_USARTInit:	
   652                           ; 0 bytes @ 0x2
   653                           
   654                           
   655                           ; 0 bytes @ 0x2
   656  0022                     	ds	1
   657  0023                     ??_strncmp:	
   658  0023                     ??_USARTWriteString:	
   659                           ; 0 bytes @ 0x3
   660                           
   661                           
   662                           ; 0 bytes @ 0x3
   663  0023                     	ds	1
   664  0024                     LCDWriteByte@LCDData:	
   665                           
   666                           ; 1 bytes @ 0x4
   667  0024                     	ds	1
   668  0025                     ??_LCDWriteCommand:	
   669  0025                     ??_LCDWriteData:	
   670                           ; 0 bytes @ 0x5
   671                           
   672  0025                     LCDWriteCommand@LCDData:	
   673                           ; 0 bytes @ 0x5
   674                           
   675  0025                     LCDWriteData@LCDData:	
   676                           ; 1 bytes @ 0x5
   677                           
   678  0025                     strncmp@s1:	
   679                           ; 1 bytes @ 0x5
   680                           
   681                           
   682                           ; 1 bytes @ 0x5
   683  0025                     	ds	1
   684  0026                     ??_LCDInitialize:	
   685  0026                     ??_LCDWriteString:	
   686                           ; 0 bytes @ 0x6
   687                           
   688  0026                     ??_LCDReset:	
   689                           ; 0 bytes @ 0x6
   690                           
   691                           
   692                           ; 0 bytes @ 0x6
   693  0026                     	ds	1
   694  0027                     LCDWriteString@lcd_string:	
   695                           
   696                           ; 1 bytes @ 0x7
   697  0027                     	ds	1
   698  0028                     ??_main:	
   699                           
   700                           ; 0 bytes @ 0x8
   701  0028                     	ds	4
   702  002C                     main@p:	
   703                           
   704                           ; 10 bytes @ 0xC
   705  002C                     	ds	10
   706  0036                     main@m:	
   707                           
   708                           ; 10 bytes @ 0x16
   709  0036                     	ds	10
   710  0040                     main@i:	
   711                           
   712                           ; 2 bytes @ 0x20
   713  0040                     	ds	2
   714  0042                     main@n:	
   715                           
   716                           ; 1 bytes @ 0x22
   717  0042                     	ds	1
   718  0043                     main@mflag:	
   719                           
   720                           ; 2 bytes @ 0x23
   721  0043                     	ds	2
   722  0045                     main@j:	
   723                           
   724                           ; 2 bytes @ 0x25
   725  0045                     	ds	2
   726  0047                     main@x:	
   727                           
   728                           ; 2 bytes @ 0x27
   729  0047                     	ds	2
   730  0049                     main@k:	
   731                           
   732                           ; 2 bytes @ 0x29
   733  0049                     	ds	2
   734  004B                     main@ch:	
   735                           
   736                           ; 1 bytes @ 0x2B
   737  004B                     	ds	1
   738                           
   739                           	psect	maintext
   740  0032                     __pmaintext:	
   741 ;;
   742 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   743 ;;
   744 ;; *************** function _main *****************
   745 ;; Defined at:
   746 ;;		line 54 in file "usart_test.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;		None
   749 ;; Auto vars:     Size  Location     Type
   750 ;;  x               2   39[BANK0 ] int 
   751 ;;  ch              1   43[BANK0 ] unsigned char 
   752 ;;  n               1   34[BANK0 ] unsigned char 
   753 ;;  m              10   22[BANK0 ] unsigned char [10]
   754 ;;  p              10   12[BANK0 ] unsigned char [10]
   755 ;;  k               2   41[BANK0 ] unsigned int 
   756 ;;  j               2   37[BANK0 ] unsigned int 
   757 ;;  mflag           2   35[BANK0 ] unsigned int 
   758 ;;  i               2   32[BANK0 ] unsigned int 
   759 ;; Return value:  Size  Location     Type
   760 ;;		None               void
   761 ;; Registers used:
   762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : B00/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   768 ;;      Params:         0       0       0       0       0
   769 ;;      Locals:         0      32       0       0       0
   770 ;;      Temps:          0       4       0       0       0
   771 ;;      Totals:         0      36       0       0       0
   772 ;;Total ram usage:       36 bytes
   773 ;; Hardware stack levels required when called:    7
   774 ;; This function calls:
   775 ;;		_LCDEnable
   776 ;;		_LCDInitialize
   777 ;;		_LCDWriteCommand
   778 ;;		_LCDWriteData
   779 ;;		_LCDWriteString
   780 ;;		_USARTDataAvailable
   781 ;;		_USARTInit
   782 ;;		_USARTReadData
   783 ;;		_USARTWriteChar
   784 ;;		_USARTWriteString
   785 ;;		_strncmp
   786 ;; This function is called by:
   787 ;;		Startup code after reset
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           
   792                           ;psect for function _main
   793  0032                     _main:	
   794                           
   795                           ;usart_test.c: 57: unsigned int i = 1;
   796                           
   797                           ;incstack = 0
   798                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   799  0032  3001               	movlw	1
   800  0033  1283               	bcf	3,5	;RP0=0, select bank0
   801  0034  1303               	bcf	3,6	;RP1=0, select bank0
   802  0035  00C0               	movwf	main@i
   803  0036  3000               	movlw	0
   804  0037  00C1               	movwf	main@i+1
   805                           
   806                           ;usart_test.c: 58: unsigned int j = 0;
   807  0038  01C5               	clrf	main@j
   808  0039  01C6               	clrf	main@j+1
   809                           
   810                           ;usart_test.c: 59: unsigned char p[10]= "meera";
   811  003A  302C               	movlw	main@p& (0+255)
   812  003B  0084               	movwf	4
   813  003C  304C               	movlw	low main@F2190
   814  003D  00A8               	movwf	??_main
   815  003E  0804               	movf	4,w
   816  003F  00A9               	movwf	??_main+1
   817  0040  300A               	movlw	10
   818  0041  00AA               	movwf	??_main+2
   819  0042                     u840:	
   820  0042  0828               	movf	??_main,w
   821  0043  0084               	movwf	4
   822  0044  1383               	bcf	3,7	;select IRP bank0
   823  0045  0800               	movf	0,w
   824  0046  00AB               	movwf	??_main+3
   825  0047  0AA8               	incf	??_main,f
   826  0048  0829               	movf	??_main+1,w
   827  0049  0084               	movwf	4
   828  004A  082B               	movf	??_main+3,w
   829  004B  0080               	movwf	0
   830  004C  0AA9               	incf	??_main+1,f
   831  004D  0BAA               	decfsz	??_main+2,f
   832  004E  2842               	goto	u840
   833                           
   834                           ;usart_test.c: 60: unsigned char m[10];
   835                           ;usart_test.c: 61: unsigned int k = 0;
   836  004F  01C9               	clrf	main@k
   837  0050  01CA               	clrf	main@k+1
   838                           
   839                           ;usart_test.c: 62: unsigned int mflag = 0;
   840  0051  01C3               	clrf	main@mflag
   841  0052  01C4               	clrf	main@mflag+1
   842                           
   843                           ;usart_test.c: 64: TRISD = 0x00;
   844  0053  1683               	bsf	3,5	;RP0=1, select bank1
   845  0054  1303               	bcf	3,6	;RP1=0, select bank1
   846  0055  0188               	clrf	8	;volatile
   847                           
   848                           ;usart_test.c: 65: TRISCbits.TRISC4 = 0;
   849  0056  1207               	bcf	7,4	;volatile
   850                           
   851                           ;usart_test.c: 66: PORTCbits.RC4 = 0;
   852  0057  1283               	bcf	3,5	;RP0=0, select bank0
   853  0058  1303               	bcf	3,6	;RP1=0, select bank0
   854  0059  1207               	bcf	7,4	;volatile
   855                           
   856                           ;usart_test.c: 67: USARTInit(9600);
   857  005A  3080               	movlw	128
   858  005B  00A0               	movwf	USARTInit@baud_rate
   859  005C  3025               	movlw	37
   860  005D  00A1               	movwf	USARTInit@baud_rate+1
   861  005E  120A  118A  21C4  120A  118A  	fcall	_USARTInit
   862                           
   863                           ;usart_test.c: 68: LCDEnable();
   864  0063  120A  118A  23E8  120A  118A  	fcall	_LCDEnable
   865                           
   866                           ;usart_test.c: 69: _delay((unsigned long)((1000)*(20000000/4000.0)));
   867  0068  301A               	movlw	26
   868  0069  1283               	bcf	3,5	;RP0=0, select bank0
   869  006A  1303               	bcf	3,6	;RP1=0, select bank0
   870  006B  00AA               	movwf	??_main+2
   871  006C  305E               	movlw	94
   872  006D  00A9               	movwf	??_main+1
   873  006E  3086               	movlw	134
   874  006F  00A8               	movwf	??_main
   875  0070                     u1247:	
   876  0070  0BA8               	decfsz	??_main,f
   877  0071  2870               	goto	u1247
   878  0072  0BA9               	decfsz	??_main+1,f
   879  0073  2870               	goto	u1247
   880  0074  0BAA               	decfsz	??_main+2,f
   881  0075  2870               	goto	u1247
   882  0076  0000               	nop
   883                           
   884                           ;usart_test.c: 70: LCDInitialize();
   885  0077  120A  118A  22F8  120A  118A  	fcall	_LCDInitialize
   886                           
   887                           ;usart_test.c: 71: _delay((unsigned long)((1000)*(20000000/4000.0)));
   888  007C  301A               	movlw	26
   889  007D  1283               	bcf	3,5	;RP0=0, select bank0
   890  007E  1303               	bcf	3,6	;RP1=0, select bank0
   891  007F  00AA               	movwf	??_main+2
   892  0080  305E               	movlw	94
   893  0081  00A9               	movwf	??_main+1
   894  0082  3086               	movlw	134
   895  0083  00A8               	movwf	??_main
   896  0084                     u1257:	
   897  0084  0BA8               	decfsz	??_main,f
   898  0085  2884               	goto	u1257
   899  0086  0BA9               	decfsz	??_main+1,f
   900  0087  2884               	goto	u1257
   901  0088  0BAA               	decfsz	??_main+2,f
   902  0089  2884               	goto	u1257
   903  008A  0000               	nop
   904                           
   905                           ;usart_test.c: 72: LCDWriteString("welcome");
   906  008B  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   907  008C  120A  118A  238C  120A  118A  	fcall	_LCDWriteString
   908                           
   909                           ;usart_test.c: 73: _delay((unsigned long)((1000)*(20000000/4000.0)));
   910  0091  301A               	movlw	26
   911  0092  1283               	bcf	3,5	;RP0=0, select bank0
   912  0093  1303               	bcf	3,6	;RP1=0, select bank0
   913  0094  00AA               	movwf	??_main+2
   914  0095  305E               	movlw	94
   915  0096  00A9               	movwf	??_main+1
   916  0097  3086               	movlw	134
   917  0098  00A8               	movwf	??_main
   918  0099                     u1267:	
   919  0099  0BA8               	decfsz	??_main,f
   920  009A  2899               	goto	u1267
   921  009B  0BA9               	decfsz	??_main+1,f
   922  009C  2899               	goto	u1267
   923  009D  0BAA               	decfsz	??_main+2,f
   924  009E  2899               	goto	u1267
   925  009F  0000               	nop
   926                           
   927                           ;usart_test.c: 74: USARTWriteString("Hii.. Bluetooth is ready\r\n");
   928  00A0  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   929  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   930  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   931  00A3  00A1               	movwf	USARTWriteString@str
   932  00A4  3080               	movlw	128
   933  00A5  00A2               	movwf	USARTWriteString@str+1
   934  00A6  120A  118A  2321  120A  118A  	fcall	_USARTWriteString
   935                           
   936                           ;usart_test.c: 75: LCDWriteCommand(0x01);
   937  00AB  3001               	movlw	1
   938  00AC  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
   939                           
   940                           ;usart_test.c: 76: _delay((unsigned long)((100)*(20000000/4000.0)));
   941  00B1  3003               	movlw	3
   942  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   943  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   944  00B4  00AA               	movwf	??_main+2
   945  00B5  308A               	movlw	138
   946  00B6  00A9               	movwf	??_main+1
   947  00B7  3056               	movlw	86
   948  00B8  00A8               	movwf	??_main
   949  00B9                     u1277:	
   950  00B9  0BA8               	decfsz	??_main,f
   951  00BA  28B9               	goto	u1277
   952  00BB  0BA9               	decfsz	??_main+1,f
   953  00BC  28B9               	goto	u1277
   954  00BD  0BAA               	decfsz	??_main+2,f
   955  00BE  28B9               	goto	u1277
   956  00BF  28C0               	nop2
   957  00C0                     l1480:	
   958                           ;usart_test.c: 78: while(1)
   959                           
   960                           
   961                           ;usart_test.c: 79: {
   962                           ;usart_test.c: 81: uint8_t n= USARTDataAvailable();
   963  00C0  120A  118A  2369  120A  118A  	fcall	_USARTDataAvailable
   964  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   965  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   966  00C7  00A8               	movwf	??_main
   967  00C8  0828               	movf	??_main,w
   968  00C9  00C2               	movwf	main@n
   969                           
   970                           ;usart_test.c: 84: if(n!=0)
   971  00CA  0842               	movf	main@n,w
   972  00CB  1903               	btfsc	3,2
   973  00CC  28C0               	goto	l1480
   974                           
   975                           ;usart_test.c: 85: {
   976                           ;usart_test.c: 88: char ch=USARTReadData();
   977  00CD  120A  118A  2346  120A  118A  	fcall	_USARTReadData
   978  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   979  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   980  00D4  00A8               	movwf	??_main
   981  00D5  0828               	movf	??_main,w
   982  00D6  00CB               	movwf	main@ch
   983                           
   984                           ;usart_test.c: 89: if((i%16) == 0)
   985  00D7  300F               	movlw	15
   986  00D8  0540               	andwf	main@i,w
   987  00D9  00A8               	movwf	??_main
   988  00DA  3000               	movlw	0
   989  00DB  0541               	andwf	main@i+1,w
   990  00DC  00A9               	movwf	??_main+1
   991  00DD  0828               	movf	??_main,w
   992  00DE  0429               	iorwf	??_main+1,w
   993  00DF  1D03               	btfss	3,2
   994  00E0  2911               	goto	l1502
   995                           
   996                           ;usart_test.c: 90: {
   997                           ;usart_test.c: 91: if(j == 0)
   998  00E1  0845               	movf	main@j,w
   999  00E2  0446               	iorwf	main@j+1,w
  1000  00E3  1D03               	btfss	3,2
  1001  00E4  28F2               	goto	l1494
  1002                           
  1003                           ;usart_test.c: 92: {
  1004                           ;usart_test.c: 93: LCDWriteCommand(0xC0);
  1005  00E5  30C0               	movlw	192
  1006  00E6  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  1007                           
  1008                           ;usart_test.c: 94: j = 1;
  1009  00EB  3001               	movlw	1
  1010  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  1011  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  1012  00EE  00C5               	movwf	main@j
  1013  00EF  3000               	movlw	0
  1014  00F0  00C6               	movwf	main@j+1
  1015                           
  1016                           ;usart_test.c: 95: }
  1017  00F1  2911               	goto	l1502
  1018  00F2                     l1494:	
  1019                           
  1020                           ;usart_test.c: 96: else if (j == 1)
  1021  00F2  0345               	decf	main@j,w
  1022  00F3  0446               	iorwf	main@j+1,w
  1023  00F4  1D03               	btfss	3,2
  1024  00F5  2911               	goto	l1502
  1025                           
  1026                           ;usart_test.c: 97: {
  1027                           ;usart_test.c: 98: LCDWriteCommand(0x80);
  1028  00F6  3080               	movlw	128
  1029  00F7  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  1030                           
  1031                           ;usart_test.c: 99: LCDWriteCommand(0x01);
  1032  00FC  3001               	movlw	1
  1033  00FD  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  1034                           
  1035                           ;usart_test.c: 100: _delay((unsigned long)((2)*(20000000/4000.0)));
  1036  0102  300D               	movlw	13
  1037  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0105  00A9               	movwf	??_main+1
  1040  0106  30FB               	movlw	251
  1041  0107  00A8               	movwf	??_main
  1042  0108                     u1287:	
  1043  0108  0BA8               	decfsz	??_main,f
  1044  0109  2908               	goto	u1287
  1045  010A  0BA9               	decfsz	??_main+1,f
  1046  010B  2908               	goto	u1287
  1047  010C  290D               	nop2
  1048                           
  1049                           ;usart_test.c: 101: j = 0;
  1050  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1051  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1052  010F  01C5               	clrf	main@j
  1053  0110  01C6               	clrf	main@j+1
  1054  0111                     l1502:	
  1055                           
  1056                           ;usart_test.c: 102: }
  1057                           ;usart_test.c: 103: }
  1058                           ;usart_test.c: 104: if((ch!='\r') || (ch!='\n'))
  1059  0111  300D               	movlw	13
  1060  0112  064B               	xorwf	main@ch,w
  1061  0113  1D03               	btfss	3,2
  1062  0114  2919               	goto	l1506
  1063  0115  300A               	movlw	10
  1064  0116  064B               	xorwf	main@ch,w
  1065  0117  1903               	btfsc	3,2
  1066  0118  2927               	goto	l1510
  1067  0119                     l1506:	
  1068                           
  1069                           ;usart_test.c: 105: {
  1070                           ;usart_test.c: 106: LCDWriteData(ch);
  1071  0119  084B               	movf	main@ch,w
  1072  011A  120A  118A  2402  120A  118A  	fcall	_LCDWriteData
  1073                           
  1074                           ;usart_test.c: 107: i++;
  1075  011F  3001               	movlw	1
  1076  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0122  07C0               	addwf	main@i,f
  1079  0123  1803               	skipnc
  1080  0124  0AC1               	incf	main@i+1,f
  1081  0125  3000               	movlw	0
  1082  0126  07C1               	addwf	main@i+1,f
  1083  0127                     l1510:	
  1084                           
  1085                           ;usart_test.c: 108: }
  1086                           ;usart_test.c: 109: if(mflag)
  1087  0127  0843               	movf	main@mflag,w
  1088  0128  0444               	iorwf	main@mflag+1,w
  1089  0129  1903               	btfsc	3,2
  1090  012A  299F               	goto	l1540
  1091                           
  1092                           ;usart_test.c: 110: {
  1093                           ;usart_test.c: 111: m[k] = ch;
  1094  012B  084B               	movf	main@ch,w
  1095  012C  00A8               	movwf	??_main
  1096  012D  0849               	movf	main@k,w
  1097  012E  3E36               	addlw	(low (main@m| 0))& (0+255)
  1098  012F  0084               	movwf	4
  1099  0130  0828               	movf	??_main,w
  1100  0131  1383               	bcf	3,7	;select IRP bank0
  1101  0132  0080               	movwf	0
  1102                           
  1103                           ;usart_test.c: 112: k++;
  1104  0133  3001               	movlw	1
  1105  0134  07C9               	addwf	main@k,f
  1106  0135  1803               	skipnc
  1107  0136  0ACA               	incf	main@k+1,f
  1108  0137  3000               	movlw	0
  1109  0138  07CA               	addwf	main@k+1,f
  1110                           
  1111                           ;usart_test.c: 113: USARTWriteChar(k+48);
  1112  0139  0849               	movf	main@k,w
  1113  013A  3E30               	addlw	48
  1114  013B  120A  118A  241C  120A  118A  	fcall	_USARTWriteChar
  1115                           
  1116                           ;usart_test.c: 114: if (k >= 6)
  1117  0140  3000               	movlw	0
  1118  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1119  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1120  0143  024A               	subwf	main@k+1,w
  1121  0144  3006               	movlw	6
  1122  0145  1903               	skipnz
  1123  0146  0249               	subwf	main@k,w
  1124  0147  1C03               	skipc
  1125  0148  299F               	goto	l1540
  1126                           
  1127                           ;usart_test.c: 115: {
  1128                           ;usart_test.c: 121: USARTWriteString(m);
  1129  0149  3036               	movlw	(low (main@m| 0))& (0+255)
  1130  014A  00A1               	movwf	USARTWriteString@str
  1131  014B  3000               	movlw	0
  1132  014C  00A2               	movwf	USARTWriteString@str+1
  1133  014D  120A  118A  2321  120A  118A  	fcall	_USARTWriteString
  1134                           
  1135                           ;usart_test.c: 122: USARTWriteString("\r\n");
  1136  0152  3019               	movlw	(low (((STR_2+24)-__stringbase)| (0+32768)))& (0+255)
  1137  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1139  0155  00A1               	movwf	USARTWriteString@str
  1140  0156  3080               	movlw	128
  1141  0157  00A2               	movwf	USARTWriteString@str+1
  1142  0158  120A  118A  2321  120A  118A  	fcall	_USARTWriteString
  1143                           
  1144                           ;usart_test.c: 123: if(strncmp(m,p,5) == 0)
  1145  015D  302C               	movlw	(low (main@p| 0))& (0+255)
  1146  015E  1283               	bcf	3,5	;RP0=0, select bank0
  1147  015F  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0160  00A8               	movwf	??_main
  1149  0161  0828               	movf	??_main,w
  1150  0162  00A0               	movwf	strncmp@s2
  1151  0163  3005               	movlw	5
  1152  0164  00A1               	movwf	strncmp@len
  1153  0165  3000               	movlw	0
  1154  0166  00A2               	movwf	strncmp@len+1
  1155  0167  3036               	movlw	(low (main@m| 0))& (0+255)
  1156  0168  120A  118A  2251  120A  118A  	fcall	_strncmp
  1157  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1158  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1159  016F  0820               	movf	?_strncmp,w
  1160  0170  0421               	iorwf	?_strncmp+1,w
  1161  0171  1D03               	btfss	3,2
  1162  0172  2999               	goto	l1538
  1163                           
  1164                           ;usart_test.c: 124: {
  1165                           ;usart_test.c: 125: RC4 = 1;
  1166  0173  1607               	bsf	7,4	;volatile
  1167                           
  1168                           ;usart_test.c: 126: for(int x = 0; x<=6; x++)
  1169  0174  01C7               	clrf	main@x
  1170  0175  01C8               	clrf	main@x+1
  1171  0176  0848               	movf	main@x+1,w
  1172  0177  3A80               	xorlw	128
  1173  0178  00FF               	movwf	127
  1174  0179  3080               	movlw	128
  1175  017A  027F               	subwf	127,w
  1176  017B  1D03               	skipz
  1177  017C  297F               	goto	u945
  1178  017D  3007               	movlw	7
  1179  017E  0247               	subwf	main@x,w
  1180  017F                     u945:	
  1181  017F  1803               	btfsc	3,0
  1182  0180  2999               	goto	l1538
  1183  0181                     l1532:	
  1184                           
  1185                           ;usart_test.c: 127: m[x] = 0;
  1186  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1187  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1188  0183  0847               	movf	main@x,w
  1189  0184  3E36               	addlw	(low (main@m| 0))& (0+255)
  1190  0185  0084               	movwf	4
  1191  0186  1383               	bcf	3,7	;select IRP bank0
  1192  0187  0180               	clrf	0
  1193  0188  3001               	movlw	1
  1194  0189  07C7               	addwf	main@x,f
  1195  018A  1803               	skipnc
  1196  018B  0AC8               	incf	main@x+1,f
  1197  018C  3000               	movlw	0
  1198  018D  07C8               	addwf	main@x+1,f
  1199  018E  0848               	movf	main@x+1,w
  1200  018F  3A80               	xorlw	128
  1201  0190  00FF               	movwf	127
  1202  0191  3080               	movlw	128
  1203  0192  027F               	subwf	127,w
  1204  0193  1D03               	skipz
  1205  0194  2997               	goto	u955
  1206  0195  3007               	movlw	7
  1207  0196  0247               	subwf	main@x,w
  1208  0197                     u955:	
  1209  0197  1C03               	skipc
  1210  0198  2981               	goto	l1532
  1211  0199                     l1538:	
  1212                           
  1213                           ;usart_test.c: 128: }
  1214                           ;usart_test.c: 129: k = 0;
  1215  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1216  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1217  019B  01C9               	clrf	main@k
  1218  019C  01CA               	clrf	main@k+1
  1219                           
  1220                           ;usart_test.c: 130: mflag = 0;
  1221  019D  01C3               	clrf	main@mflag
  1222  019E  01C4               	clrf	main@mflag+1
  1223  019F                     l1540:	
  1224                           
  1225                           ;usart_test.c: 131: }
  1226                           ;usart_test.c: 133: }
  1227                           ;usart_test.c: 134: if(ch == 'm')
  1228  019F  306D               	movlw	109
  1229  01A0  064B               	xorwf	main@ch,w
  1230  01A1  1D03               	btfss	3,2
  1231  01A2  28C0               	goto	l1480
  1232                           
  1233                           ;usart_test.c: 135: {
  1234                           ;usart_test.c: 136: m[k] = ch;
  1235  01A3  084B               	movf	main@ch,w
  1236  01A4  00A8               	movwf	??_main
  1237  01A5  0849               	movf	main@k,w
  1238  01A6  3E36               	addlw	(low (main@m| 0))& (0+255)
  1239  01A7  0084               	movwf	4
  1240  01A8  0828               	movf	??_main,w
  1241  01A9  1383               	bcf	3,7	;select IRP bank0
  1242  01AA  0080               	movwf	0
  1243                           
  1244                           ;usart_test.c: 137: mflag++;
  1245  01AB  3001               	movlw	1
  1246  01AC  07C3               	addwf	main@mflag,f
  1247  01AD  1803               	skipnc
  1248  01AE  0AC4               	incf	main@mflag+1,f
  1249  01AF  3000               	movlw	0
  1250  01B0  07C4               	addwf	main@mflag+1,f
  1251                           
  1252                           ;usart_test.c: 138: k++;
  1253  01B1  3001               	movlw	1
  1254  01B2  07C9               	addwf	main@k,f
  1255  01B3  1803               	skipnc
  1256  01B4  0ACA               	incf	main@k+1,f
  1257  01B5  3000               	movlw	0
  1258  01B6  07CA               	addwf	main@k+1,f
  1259                           
  1260                           ;usart_test.c: 139: USARTWriteString("Flagset");
  1261  01B7  3024               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1262  01B8  00A1               	movwf	USARTWriteString@str
  1263  01B9  3080               	movlw	128
  1264  01BA  00A2               	movwf	USARTWriteString@str+1
  1265  01BB  120A  118A  2321  120A  118A  	fcall	_USARTWriteString
  1266                           
  1267                           ;usart_test.c: 140: RC4 = 0;
  1268  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1269  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1270  01C2  1207               	bcf	7,4	;volatile
  1271  01C3  28C0               	goto	l1480
  1272  01C4                     __end_of_main:	
  1273                           
  1274                           	psect	text1
  1275  0251                     __ptext1:	
  1276 ;; *************** function _strncmp *****************
  1277 ;; Defined at:
  1278 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strncmp.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  s1              1    wreg     PTR const unsigned char 
  1281 ;;		 -> main@m(10), 
  1282 ;;  s2              1    0[BANK0 ] PTR const unsigned char 
  1283 ;;		 -> main@p(10), 
  1284 ;;  len             2    1[BANK0 ] unsigned int 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  s1              1    5[BANK0 ] PTR const unsigned char 
  1287 ;;		 -> main@m(10), 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  2    0[BANK0 ] int 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         0       3       0       0       0
  1298 ;;      Locals:         0       1       0       0       0
  1299 ;;      Temps:          0       2       0       0       0
  1300 ;;      Totals:         0       6       0       0       0
  1301 ;;Total ram usage:        6 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    2
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_main
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           
  1312                           ;psect for function _strncmp
  1313  0251                     _strncmp:	
  1314                           
  1315                           ;incstack = 0
  1316                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0]
  1317                           ;strncmp@s1 stored from wreg
  1318  0251  1283               	bcf	3,5	;RP0=0, select bank0
  1319  0252  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0253  00A5               	movwf	strncmp@s1
  1321  0254                     l690:	
  1322  0254  3001               	movlw	1
  1323  0255  02A1               	subwf	strncmp@len,f
  1324  0256  3000               	movlw	0
  1325  0257  1C03               	skipc
  1326  0258  03A2               	decf	strncmp@len+1,f
  1327  0259  02A2               	subwf	strncmp@len+1,f
  1328  025A  0A21               	incf	strncmp@len,w
  1329  025B  1903               	btfsc	3,2
  1330  025C  0A22               	incf	strncmp@len+1,w
  1331  025D  1903               	btfsc	3,2
  1332  025E  2A8C               	goto	l1374
  1333  025F  0825               	movf	strncmp@s1,w
  1334  0260  0084               	movwf	4
  1335  0261  1383               	bcf	3,7	;select IRP bank0
  1336  0262  0800               	movf	0,w
  1337  0263  1903               	btfsc	3,2
  1338  0264  2A6F               	goto	l1368
  1339  0265  0820               	movf	strncmp@s2,w
  1340  0266  0084               	movwf	4
  1341  0267  0800               	movf	0,w
  1342  0268  00A3               	movwf	??_strncmp
  1343  0269  0825               	movf	strncmp@s1,w
  1344  026A  0084               	movwf	4
  1345  026B  0800               	movf	0,w
  1346  026C  0623               	xorwf	??_strncmp,w
  1347  026D  1903               	skipnz
  1348  026E  2A83               	goto	l1372
  1349  026F                     l1368:	
  1350  026F  0820               	movf	strncmp@s2,w
  1351  0270  0084               	movwf	4
  1352  0271  0800               	movf	0,w
  1353  0272  00A3               	movwf	??_strncmp
  1354  0273  01A4               	clrf	??_strncmp+1
  1355  0274  09A3               	comf	??_strncmp,f
  1356  0275  09A4               	comf	??_strncmp+1,f
  1357  0276  0AA3               	incf	??_strncmp,f
  1358  0277  1903               	skipnz
  1359  0278  0AA4               	incf	??_strncmp+1,f
  1360  0279  0825               	movf	strncmp@s1,w
  1361  027A  0084               	movwf	4
  1362  027B  0800               	movf	0,w
  1363  027C  0723               	addwf	??_strncmp,w
  1364  027D  00A0               	movwf	?_strncmp
  1365  027E  0824               	movf	??_strncmp+1,w
  1366  027F  1803               	skipnc
  1367  0280  0A24               	incf	??_strncmp+1,w
  1368  0281  00A1               	movwf	?_strncmp+1
  1369  0282  0008               	return
  1370  0283                     l1372:	
  1371  0283  3001               	movlw	1
  1372  0284  00A3               	movwf	??_strncmp
  1373  0285  0823               	movf	??_strncmp,w
  1374  0286  07A5               	addwf	strncmp@s1,f
  1375  0287  3001               	movlw	1
  1376  0288  00A3               	movwf	??_strncmp
  1377  0289  0823               	movf	??_strncmp,w
  1378  028A  07A0               	addwf	strncmp@s2,f
  1379  028B  2A54               	goto	l690
  1380  028C                     l1374:	
  1381  028C  01A0               	clrf	?_strncmp
  1382  028D  01A1               	clrf	?_strncmp+1
  1383  028E  0008               	return
  1384  028F                     __end_of_strncmp:	
  1385                           
  1386                           	psect	text2
  1387  0321                     __ptext2:	
  1388 ;; *************** function _USARTWriteString *****************
  1389 ;; Defined at:
  1390 ;;		line 76 in file "usart_pic16.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  str             2    1[BANK0 ] PTR const unsigned char 
  1393 ;;		 -> STR_4(8), STR_3(3), main@m(10), STR_2(27), 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;		None               void
  1398 ;; Registers used:
  1399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1405 ;;      Params:         0       2       0       0       0
  1406 ;;      Locals:         0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0
  1408 ;;      Totals:         0       2       0       0       0
  1409 ;;Total ram usage:        2 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    3
  1412 ;; This function calls:
  1413 ;;		_USARTWriteChar
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;;		_USARTWriteLine
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           
  1421                           ;psect for function _USARTWriteString
  1422  0321                     _USARTWriteString:	
  1423  0321                     l1260:	
  1424                           ;usart_pic16.c: 78: while(*str!='\0')
  1425                           
  1426                           ;incstack = 0
  1427                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1428                           
  1429  0321  1283               	bcf	3,5	;RP0=0, select bank0
  1430  0322  1303               	bcf	3,6	;RP1=0, select bank0
  1431  0323  0822               	movf	USARTWriteString@str+1,w
  1432  0324  00FF               	movwf	127
  1433  0325  0821               	movf	USARTWriteString@str,w
  1434  0326  0084               	movwf	4
  1435  0327  120A  118A  228F  120A  118A  	fcall	stringtab
  1436  032C  3A00               	xorlw	0
  1437  032D  1903               	btfsc	3,2
  1438  032E  0008               	return
  1439                           
  1440                           ;usart_pic16.c: 79: {
  1441                           ;usart_pic16.c: 80: USARTWriteChar(*str);
  1442  032F  1283               	bcf	3,5	;RP0=0, select bank0
  1443  0330  1303               	bcf	3,6	;RP1=0, select bank0
  1444  0331  0822               	movf	USARTWriteString@str+1,w
  1445  0332  00FF               	movwf	127
  1446  0333  0821               	movf	USARTWriteString@str,w
  1447  0334  0084               	movwf	4
  1448  0335  120A  118A  228F  120A  118A  	fcall	stringtab
  1449  033A  120A  118A  241C  120A  118A  	fcall	_USARTWriteChar
  1450                           
  1451                           ;usart_pic16.c: 81: str++;
  1452  033F  3001               	movlw	1
  1453  0340  1283               	bcf	3,5	;RP0=0, select bank0
  1454  0341  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0342  07A1               	addwf	USARTWriteString@str,f
  1456  0343  1803               	skipnc
  1457  0344  0AA2               	incf	USARTWriteString@str+1,f
  1458  0345  2B21               	goto	l1260
  1459  0346                     __end_of_USARTWriteString:	
  1460                           
  1461                           	psect	text3
  1462  041C                     __ptext3:	
  1463 ;; *************** function _USARTWriteChar *****************
  1464 ;; Defined at:
  1465 ;;		line 69 in file "usart_pic16.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  ch              1    wreg     unsigned char 
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  ch              1    0[BANK0 ] unsigned char 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;		None               void
  1472 ;; Registers used:
  1473 ;;		wreg
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1479 ;;      Params:         0       0       0       0       0
  1480 ;;      Locals:         0       1       0       0       0
  1481 ;;      Temps:          0       0       0       0       0
  1482 ;;      Totals:         0       1       0       0       0
  1483 ;;Total ram usage:        1 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    2
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_USARTWriteString
  1490 ;;		_main
  1491 ;;		_USARTWriteLine
  1492 ;;		_USARTWriteInt
  1493 ;;		_USARTGotoNewLine
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           
  1498                           ;psect for function _USARTWriteChar
  1499  041C                     _USARTWriteChar:	
  1500                           
  1501                           ;incstack = 0
  1502                           ; Regs used in _USARTWriteChar: [wreg]
  1503                           ;USARTWriteChar@ch stored from wreg
  1504  041C  1283               	bcf	3,5	;RP0=0, select bank0
  1505  041D  1303               	bcf	3,6	;RP1=0, select bank0
  1506  041E  00A0               	movwf	USARTWriteChar@ch
  1507  041F                     l38:	
  1508                           ;usart_pic16.c: 71: while(!PIR1bits.TXIF);
  1509                           
  1510  041F  1E0C               	btfss	12,4	;volatile
  1511  0420  2C1F               	goto	l38
  1512                           
  1513                           ;usart_pic16.c: 73: TXREG=ch;
  1514  0421  0820               	movf	USARTWriteChar@ch,w
  1515  0422  0099               	movwf	25	;volatile
  1516  0423  0008               	return
  1517  0424                     __end_of_USARTWriteChar:	
  1518                           
  1519                           	psect	text4
  1520  0346                     __ptext4:	
  1521 ;; *************** function _USARTReadData *****************
  1522 ;; Defined at:
  1523 ;;		line 122 in file "usart_pic16.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;		None
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  data            1    1[BANK0 ] unsigned char 
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      unsigned char 
  1530 ;; Registers used:
  1531 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1537 ;;      Params:         0       0       0       0       0
  1538 ;;      Locals:         0       1       0       0       0
  1539 ;;      Temps:          0       1       0       0       0
  1540 ;;      Totals:         0       2       0       0       0
  1541 ;;Total ram usage:        2 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; Hardware stack levels required when called:    2
  1544 ;; This function calls:
  1545 ;;		Nothing
  1546 ;; This function is called by:
  1547 ;;		_main
  1548 ;;		_USARTReadBuffer
  1549 ;;		_USARTFlushBuffer
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _USARTReadData
  1555  0346                     _USARTReadData:	
  1556                           
  1557                           ;usart_pic16.c: 124: char data;
  1558                           ;usart_pic16.c: 127: if(UQFront==-1)
  1559                           
  1560                           ;incstack = 0
  1561                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
  1562  0346  0A7A               	incf	_UQFront,w	;volatile
  1563  0347  1D03               	btfss	3,2
  1564  0348  2B4B               	goto	l1296
  1565                           
  1566                           ;usart_pic16.c: 128: return 0;
  1567  0349  3000               	movlw	0
  1568  034A  0008               	return
  1569  034B                     l1296:	
  1570                           
  1571                           ;usart_pic16.c: 130: data=URBuff[UQFront];
  1572  034B  087A               	movf	_UQFront,w
  1573  034C  3EA0               	addlw	(low (_URBuff| 0))& (0+255)
  1574  034D  0084               	movwf	4
  1575  034E  1383               	bcf	3,7	;select IRP bank1
  1576  034F  0800               	movf	0,w
  1577  0350  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0351  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0352  00A0               	movwf	??_USARTReadData
  1580  0353  0820               	movf	??_USARTReadData,w
  1581  0354  00A1               	movwf	USARTReadData@data
  1582                           
  1583                           ;usart_pic16.c: 132: if(UQFront==UQEnd)
  1584  0355  087A               	movf	_UQFront,w	;volatile
  1585  0356  0679               	xorwf	_UQEnd,w	;volatile
  1586  0357  1D03               	skipz
  1587  0358  2B5F               	goto	l1302
  1588                           
  1589                           ;usart_pic16.c: 133: {
  1590                           ;usart_pic16.c: 136: UQFront=UQEnd=-1;
  1591  0359  30FF               	movlw	255
  1592  035A  00F9               	movwf	_UQEnd	;volatile
  1593  035B  00A0               	movwf	??_USARTReadData
  1594  035C  0820               	movf	??_USARTReadData,w
  1595  035D  00FA               	movwf	_UQFront	;volatile
  1596                           
  1597                           ;usart_pic16.c: 137: }
  1598  035E  2B67               	goto	l1306
  1599  035F                     l1302:	
  1600                           
  1601                           ;usart_pic16.c: 138: else
  1602                           ;usart_pic16.c: 139: {
  1603                           ;usart_pic16.c: 140: UQFront++;
  1604  035F  3001               	movlw	1
  1605  0360  00A0               	movwf	??_USARTReadData
  1606  0361  0820               	movf	??_USARTReadData,w
  1607  0362  07FA               	addwf	_UQFront,f	;volatile
  1608                           
  1609                           ;usart_pic16.c: 142: if(UQFront==64)
  1610  0363  3040               	movlw	64
  1611  0364  067A               	xorwf	_UQFront,w	;volatile
  1612  0365  1903               	btfsc	3,2
  1613                           
  1614                           ;usart_pic16.c: 143: UQFront=0;
  1615  0366  01FA               	clrf	_UQFront	;volatile
  1616  0367                     l1306:	
  1617                           
  1618                           ;usart_pic16.c: 144: }
  1619                           ;usart_pic16.c: 146: return data;
  1620  0367  0821               	movf	USARTReadData@data,w
  1621  0368  0008               	return
  1622  0369                     __end_of_USARTReadData:	
  1623                           
  1624                           	psect	text5
  1625  01C4                     __ptext5:	
  1626 ;; *************** function _USARTInit *****************
  1627 ;; Defined at:
  1628 ;;		line 29 in file "usart_pic16.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;  baud_rate       2    0[BANK0 ] unsigned int 
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;		None               void
  1635 ;; Registers used:
  1636 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1642 ;;      Params:         0       2       0       0       0
  1643 ;;      Locals:         0       0       0       0       0
  1644 ;;      Temps:          0       1       0       0       0
  1645 ;;      Totals:         0       3       0       0       0
  1646 ;;Total ram usage:        3 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    2
  1649 ;; This function calls:
  1650 ;;		Nothing
  1651 ;; This function is called by:
  1652 ;;		_main
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           
  1657                           ;psect for function _USARTInit
  1658  01C4                     _USARTInit:	
  1659                           
  1660                           ;usart_pic16.c: 32: UQFront=UQEnd=-1;
  1661                           
  1662                           ;incstack = 0
  1663                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  1664  01C4  30FF               	movlw	255
  1665  01C5  00F9               	movwf	_UQEnd	;volatile
  1666  01C6  1283               	bcf	3,5	;RP0=0, select bank0
  1667  01C7  1303               	bcf	3,6	;RP1=0, select bank0
  1668  01C8  00A2               	movwf	??_USARTInit
  1669  01C9  0822               	movf	??_USARTInit,w
  1670  01CA  00FA               	movwf	_UQFront	;volatile
  1671                           
  1672                           ;usart_pic16.c: 35: switch(baud_rate)
  1673  01CB  29D7               	goto	l1236
  1674  01CC                     l1226:	
  1675                           ;usart_pic16.c: 36: {
  1676                           ;usart_pic16.c: 37: case 9600:
  1677                           
  1678                           
  1679                           ;usart_pic16.c: 38: SPBRG=100;
  1680  01CC  3064               	movlw	100
  1681  01CD  29D3               	goto	L3
  1682  01CE                     l1228:	
  1683                           ;usart_pic16.c: 40: case 19200:
  1684                           
  1685                           ;usart_pic16.c: 39: break;
  1686                           
  1687                           
  1688                           ;usart_pic16.c: 41: SPBRG=64;
  1689  01CE  3040               	movlw	64
  1690  01CF  29D3               	goto	L3
  1691  01D0                     l1230:	
  1692                           ;usart_pic16.c: 43: case 28800:
  1693                           
  1694                           ;usart_pic16.c: 42: break;
  1695                           
  1696                           
  1697                           ;usart_pic16.c: 44: SPBRG=42;
  1698  01D0  302A               	movlw	42
  1699  01D1  29D3               	goto	L3
  1700  01D2                     l1232:	
  1701                           ;usart_pic16.c: 46: case 33600:
  1702                           
  1703                           ;usart_pic16.c: 45: break;
  1704                           
  1705                           
  1706                           ;usart_pic16.c: 47: SPBRG=36;
  1707  01D2  3024               	movlw	36
  1708  01D3                     L3:	
  1709  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  1710  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  1711  01D5  0099               	movwf	25	;volatile
  1712                           
  1713                           ;usart_pic16.c: 49: }
  1714                           
  1715                           ;usart_pic16.c: 48: break;
  1716  01D6  29FA               	goto	l31
  1717  01D7                     l1236:	
  1718                           
  1719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  1720                           ; Switch size 1, requested type "space"
  1721                           ; Number of cases is 4, Range of values is 37 to 131
  1722                           ; switch strategies available:
  1723                           ; Name         Instructions Cycles
  1724                           ; simple_byte           13     7 (average)
  1725                           ; jumptable            263     9 (fixed)
  1726                           ;	Chosen strategy is simple_byte
  1727  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1728  01D8  0821               	movf	USARTInit@baud_rate+1,w
  1729  01D9  3A25               	xorlw	37	; case 37
  1730  01DA  1903               	skipnz
  1731  01DB  29E6               	goto	l1756
  1732  01DC  3A6E               	xorlw	110	; case 75
  1733  01DD  1903               	skipnz
  1734  01DE  29EB               	goto	l1758
  1735  01DF  3A3B               	xorlw	59	; case 112
  1736  01E0  1903               	skipnz
  1737  01E1  29F0               	goto	l1760
  1738  01E2  3AF3               	xorlw	243	; case 131
  1739  01E3  1903               	skipnz
  1740  01E4  29F5               	goto	l1762
  1741  01E5  29FA               	goto	l31
  1742  01E6                     l1756:	
  1743                           
  1744                           ; Switch size 1, requested type "space"
  1745                           ; Number of cases is 1, Range of values is 128 to 128
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte            4     3 (average)
  1749                           ; direct_byte           14    11 (fixed)
  1750                           ; jumptable            263     9 (fixed)
  1751                           ;	Chosen strategy is simple_byte
  1752  01E6  0820               	movf	USARTInit@baud_rate,w
  1753  01E7  3A80               	xorlw	128	; case 128
  1754  01E8  1903               	skipnz
  1755  01E9  29CC               	goto	l1226
  1756  01EA  29FA               	goto	l31
  1757  01EB                     l1758:	
  1758                           
  1759                           ; Switch size 1, requested type "space"
  1760                           ; Number of cases is 1, Range of values is 0 to 0
  1761                           ; switch strategies available:
  1762                           ; Name         Instructions Cycles
  1763                           ; simple_byte            4     3 (average)
  1764                           ; direct_byte           11     8 (fixed)
  1765                           ; jumptable            260     6 (fixed)
  1766                           ;	Chosen strategy is simple_byte
  1767  01EB  0820               	movf	USARTInit@baud_rate,w
  1768  01EC  3A00               	xorlw	0	; case 0
  1769  01ED  1903               	skipnz
  1770  01EE  29CE               	goto	l1228
  1771  01EF  29FA               	goto	l31
  1772  01F0                     l1760:	
  1773                           
  1774                           ; Switch size 1, requested type "space"
  1775                           ; Number of cases is 1, Range of values is 128 to 128
  1776                           ; switch strategies available:
  1777                           ; Name         Instructions Cycles
  1778                           ; simple_byte            4     3 (average)
  1779                           ; direct_byte           14    11 (fixed)
  1780                           ; jumptable            263     9 (fixed)
  1781                           ;	Chosen strategy is simple_byte
  1782  01F0  0820               	movf	USARTInit@baud_rate,w
  1783  01F1  3A80               	xorlw	128	; case 128
  1784  01F2  1903               	skipnz
  1785  01F3  29D0               	goto	l1230
  1786  01F4  29FA               	goto	l31
  1787  01F5                     l1762:	
  1788                           
  1789                           ; Switch size 1, requested type "space"
  1790                           ; Number of cases is 1, Range of values is 64 to 64
  1791                           ; switch strategies available:
  1792                           ; Name         Instructions Cycles
  1793                           ; simple_byte            4     3 (average)
  1794                           ; direct_byte           14    11 (fixed)
  1795                           ; jumptable            263     9 (fixed)
  1796                           ;	Chosen strategy is simple_byte
  1797  01F5  0820               	movf	USARTInit@baud_rate,w
  1798  01F6  3A40               	xorlw	64	; case 64
  1799  01F7  1903               	skipnz
  1800  01F8  29D2               	goto	l1232
  1801  01F9  29FA               	goto	l31
  1802  01FA                     l31:	
  1803                           
  1804                           ;usart_pic16.c: 51: TXSTAbits.TX9=0;
  1805  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  1806  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  1807  01FC  1318               	bcf	24,6	;volatile
  1808                           
  1809                           ;usart_pic16.c: 52: TXSTAbits.TXEN=1;
  1810  01FD  1698               	bsf	24,5	;volatile
  1811                           
  1812                           ;usart_pic16.c: 53: TXSTAbits.SYNC=0;
  1813  01FE  1218               	bcf	24,4	;volatile
  1814                           
  1815                           ;usart_pic16.c: 54: TXSTAbits.BRGH=1;
  1816  01FF  1518               	bsf	24,2	;volatile
  1817                           
  1818                           ;usart_pic16.c: 57: RCSTAbits.SPEN=1;
  1819  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1820  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0202  1798               	bsf	24,7	;volatile
  1822                           
  1823                           ;usart_pic16.c: 58: RCSTAbits.RX9=0;
  1824  0203  1318               	bcf	24,6	;volatile
  1825                           
  1826                           ;usart_pic16.c: 59: RCSTAbits.CREN=1;
  1827  0204  1618               	bsf	24,4	;volatile
  1828                           
  1829                           ;usart_pic16.c: 60: RCSTAbits.ADDEN=0;
  1830  0205  1198               	bcf	24,3	;volatile
  1831                           
  1832                           ;usart_pic16.c: 63: RCIE=1;
  1833  0206  1683               	bsf	3,5	;RP0=1, select bank1
  1834  0207  1303               	bcf	3,6	;RP1=0, select bank1
  1835  0208  168C               	bsf	12,5	;volatile
  1836                           
  1837                           ;usart_pic16.c: 64: PEIE=1;
  1838  0209  170B               	bsf	11,6	;volatile
  1839                           
  1840                           ;usart_pic16.c: 66: (GIE = 1);
  1841  020A  178B               	bsf	11,7	;volatile
  1842  020B  0008               	return
  1843  020C                     __end_of_USARTInit:	
  1844                           
  1845                           	psect	text6
  1846  0369                     __ptext6:	
  1847 ;; *************** function _USARTDataAvailable *****************
  1848 ;; Defined at:
  1849 ;;		line 149 in file "usart_pic16.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      unsigned char 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2, status,0
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1863 ;;      Params:         0       0       0       0       0
  1864 ;;      Locals:         0       0       0       0       0
  1865 ;;      Temps:          0       1       0       0       0
  1866 ;;      Totals:         0       1       0       0       0
  1867 ;;Total ram usage:        1 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    2
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_main
  1874 ;;		_USARTFlushBuffer
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           
  1879                           ;psect for function _USARTDataAvailable
  1880  0369                     _USARTDataAvailable:	
  1881                           
  1882                           ;usart_pic16.c: 151: if(UQFront==-1) return 0;
  1883                           
  1884                           ;incstack = 0
  1885                           ; Regs used in _USARTDataAvailable: [wreg+status,2+status,0]
  1886  0369  0A7A               	incf	_UQFront,w	;volatile
  1887  036A  1D03               	btfss	3,2
  1888  036B  2B6E               	goto	l1316
  1889  036C  3000               	movlw	0
  1890  036D  0008               	return
  1891  036E                     l1316:	
  1892                           
  1893                           ;usart_pic16.c: 152: if(UQFront<UQEnd)
  1894  036E  087A               	movf	_UQFront,w	;volatile
  1895  036F  3A80               	xorlw	128
  1896  0370  1283               	bcf	3,5	;RP0=0, select bank0
  1897  0371  1303               	bcf	3,6	;RP1=0, select bank0
  1898  0372  00A0               	movwf	??_USARTDataAvailable
  1899  0373  0879               	movf	_UQEnd,w	;volatile
  1900  0374  3A80               	xorlw	128
  1901  0375  02A0               	subwf	??_USARTDataAvailable,f
  1902  0376  1803               	skipnc
  1903  0377  2B7D               	goto	l1324
  1904                           
  1905                           ;usart_pic16.c: 153: return(UQEnd-UQFront+1);
  1906  0378  037A               	decf	_UQFront,w	;volatile
  1907  0379  3AFF               	xorlw	255
  1908  037A  0779               	addwf	_UQEnd,w	;volatile
  1909  037B  3E01               	addlw	1
  1910  037C  0008               	return
  1911  037D                     l1324:	
  1912                           
  1913                           ;usart_pic16.c: 154: else if(UQFront>UQEnd)
  1914  037D  0879               	movf	_UQEnd,w	;volatile
  1915  037E  3A80               	xorlw	128
  1916  037F  00A0               	movwf	??_USARTDataAvailable
  1917  0380  087A               	movf	_UQFront,w	;volatile
  1918  0381  3A80               	xorlw	128
  1919  0382  02A0               	subwf	??_USARTDataAvailable,f
  1920  0383  1803               	skipnc
  1921  0384  2B8A               	goto	l1332
  1922                           
  1923                           ;usart_pic16.c: 155: return (64-UQFront+UQEnd+1);
  1924  0385  037A               	decf	_UQFront,w	;volatile
  1925  0386  3AFF               	xorlw	255
  1926  0387  0779               	addwf	_UQEnd,w	;volatile
  1927  0388  3E41               	addlw	65
  1928  0389  0008               	return
  1929  038A                     l1332:	
  1930                           
  1931                           ;usart_pic16.c: 156: else
  1932                           ;usart_pic16.c: 157: return 1;
  1933  038A  3001               	movlw	1
  1934  038B  0008               	return
  1935  038C                     __end_of_USARTDataAvailable:	
  1936                           
  1937                           	psect	text7
  1938  038C                     __ptext7:	
  1939 ;; *************** function _LCDWriteString *****************
  1940 ;; Defined at:
  1941 ;;		line 46 in file "LCD.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  lcd_string      1    wreg     PTR const unsigned char 
  1944 ;;		 -> STR_1(8), 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  lcd_string      1    7[BANK0 ] PTR const unsigned char 
  1947 ;;		 -> STR_1(8), 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;		None               void
  1950 ;; Registers used:
  1951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1957 ;;      Params:         0       0       0       0       0
  1958 ;;      Locals:         0       1       0       0       0
  1959 ;;      Temps:          0       1       0       0       0
  1960 ;;      Totals:         0       2       0       0       0
  1961 ;;Total ram usage:        2 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    5
  1964 ;; This function calls:
  1965 ;;		_LCDWriteData
  1966 ;; This function is called by:
  1967 ;;		_main
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           
  1972                           ;psect for function _LCDWriteString
  1973  038C                     _LCDWriteString:	
  1974                           
  1975                           ;incstack = 0
  1976                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1977                           ;LCDWriteString@lcd_string stored from wreg
  1978  038C  1283               	bcf	3,5	;RP0=0, select bank0
  1979  038D  1303               	bcf	3,6	;RP1=0, select bank0
  1980  038E  00A7               	movwf	LCDWriteString@lcd_string
  1981  038F                     l1360:	
  1982                           ;LCD.c: 48: while(*lcd_string)
  1983                           
  1984  038F  0827               	movf	LCDWriteString@lcd_string,w
  1985  0390  0084               	movwf	4
  1986  0391  120A  118A  2299  120A  118A  	fcall	stringdir
  1987  0396  3A00               	xorlw	0
  1988  0397  1903               	btfsc	3,2
  1989  0398  0008               	return
  1990                           
  1991                           ;LCD.c: 49: {
  1992                           ;LCD.c: 50: LCDWriteData(*lcd_string++);
  1993  0399  0827               	movf	LCDWriteString@lcd_string,w
  1994  039A  0084               	movwf	4
  1995  039B  120A  118A  2299  120A  118A  	fcall	stringdir
  1996  03A0  120A  118A  2402  120A  118A  	fcall	_LCDWriteData
  1997  03A5  3001               	movlw	1
  1998  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  1999  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  2000  03A8  00A6               	movwf	??_LCDWriteString
  2001  03A9  0826               	movf	??_LCDWriteString,w
  2002  03AA  07A7               	addwf	LCDWriteString@lcd_string,f
  2003  03AB  2B8F               	goto	l1360
  2004  03AC                     __end_of_LCDWriteString:	
  2005                           
  2006                           	psect	text8
  2007  0402                     __ptext8:	
  2008 ;; *************** function _LCDWriteData *****************
  2009 ;; Defined at:
  2010 ;;		line 40 in file "LCD.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  LCDData         1    wreg     unsigned char 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;  LCDData         1    5[BANK0 ] unsigned char 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;		None               void
  2017 ;; Registers used:
  2018 ;;		wreg, status,2, status,0, pclath, cstack
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2024 ;;      Params:         0       0       0       0       0
  2025 ;;      Locals:         0       1       0       0       0
  2026 ;;      Temps:          0       0       0       0       0
  2027 ;;      Totals:         0       1       0       0       0
  2028 ;;Total ram usage:        1 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    4
  2031 ;; This function calls:
  2032 ;;		_LCDWriteByte
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;;		_LCDWriteString
  2036 ;;		_LCDWriteString1
  2037 ;;		_LCDWriteStringWithLength
  2038 ;;		_LCDDisplayByte
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           
  2043                           ;psect for function _LCDWriteData
  2044  0402                     _LCDWriteData:	
  2045                           
  2046                           ;incstack = 0
  2047                           ; Regs used in _LCDWriteData: [wreg+status,2+status,0+pclath+cstack]
  2048                           ;LCDWriteData@LCDData stored from wreg
  2049  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0404  00A5               	movwf	LCDWriteData@LCDData
  2052                           
  2053                           ;LCD.c: 42: RD2 = 1;
  2054  0405  1508               	bsf	8,2	;volatile
  2055                           
  2056                           ;LCD.c: 43: LCDWriteByte(LCDData);
  2057  0406  0825               	movf	LCDWriteData@LCDData,w
  2058  0407  120A  118A  22CA   	fcall	_LCDWriteByte
  2059  040A  0008               	return
  2060  040B                     __end_of_LCDWriteData:	
  2061                           
  2062                           	psect	text9
  2063  02F8                     __ptext9:	
  2064 ;; *************** function _LCDInitialize *****************
  2065 ;; Defined at:
  2066 ;;		line 68 in file "LCD.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;		None               void
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0, pclath, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2080 ;;      Params:         0       0       0       0       0
  2081 ;;      Locals:         0       0       0       0       0
  2082 ;;      Temps:          0       1       0       0       0
  2083 ;;      Totals:         0       1       0       0       0
  2084 ;;Total ram usage:        1 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    6
  2087 ;; This function calls:
  2088 ;;		_LCDReset
  2089 ;;		_LCDWriteCommand
  2090 ;; This function is called by:
  2091 ;;		_main
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           
  2096                           ;psect for function _LCDInitialize
  2097  02F8                     _LCDInitialize:	
  2098                           
  2099                           ;LCD.c: 70: TRISD = TRISD & 0x03;
  2100                           
  2101                           ;incstack = 0
  2102                           ; Regs used in _LCDInitialize: [wreg+status,2+status,0+pclath+cstack]
  2103  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  2104  02F9  1303               	bcf	3,6	;RP1=0, select bank1
  2105  02FA  0808               	movf	8,w	;volatile
  2106  02FB  3903               	andlw	3
  2107  02FC  0088               	movwf	8	;volatile
  2108                           
  2109                           ;LCD.c: 71: RD3 = 0;
  2110  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2111  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  2112  02FF  1188               	bcf	8,3	;volatile
  2113                           
  2114                           ;LCD.c: 72: RD2 = 0;
  2115  0300  1108               	bcf	8,2	;volatile
  2116                           
  2117                           ;LCD.c: 73: PORTD &= 0x0f;
  2118  0301  300F               	movlw	15
  2119  0302  00A6               	movwf	??_LCDInitialize
  2120  0303  0826               	movf	??_LCDInitialize,w
  2121  0304  0588               	andwf	8,f	;volatile
  2122                           
  2123                           ;LCD.c: 74: LCDReset();
  2124  0305  120A  118A  23D7  120A  118A  	fcall	_LCDReset
  2125                           
  2126                           ;LCD.c: 75: LCDWriteCommand(0x28);
  2127  030A  3028               	movlw	40
  2128  030B  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  2129                           
  2130                           ;LCD.c: 76: LCDWriteCommand(0x0C);
  2131  0310  300C               	movlw	12
  2132  0311  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  2133                           
  2134                           ;LCD.c: 77: LCDWriteCommand(0x06);
  2135  0316  3006               	movlw	6
  2136  0317  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  2137                           
  2138                           ;LCD.c: 78: LCDWriteCommand(0x01);
  2139  031C  3001               	movlw	1
  2140  031D  120A  118A  240B   	fcall	_LCDWriteCommand
  2141  0320  0008               	return
  2142  0321                     __end_of_LCDInitialize:	
  2143                           
  2144                           	psect	text10
  2145  03D7                     __ptext10:	
  2146 ;; *************** function _LCDReset *****************
  2147 ;; Defined at:
  2148 ;;		line 82 in file "LCD.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;		None               void
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0, pclath, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2162 ;;      Params:         0       0       0       0       0
  2163 ;;      Locals:         0       0       0       0       0
  2164 ;;      Temps:          0       0       0       0       0
  2165 ;;      Totals:         0       0       0       0       0
  2166 ;;Total ram usage:        0 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    5
  2169 ;; This function calls:
  2170 ;;		_LCDWriteCommand
  2171 ;; This function is called by:
  2172 ;;		_LCDInitialize
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _LCDReset
  2178  03D7                     _LCDReset:	
  2179                           
  2180                           ;LCD.c: 84: LCDWriteCommand(0x33);
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _LCDReset: [wreg+status,2+status,0+pclath+cstack]
  2184  03D7  3033               	movlw	51
  2185  03D8  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  2186                           
  2187                           ;LCD.c: 85: LCDWriteCommand(0x33);
  2188  03DD  3033               	movlw	51
  2189  03DE  120A  118A  240B  120A  118A  	fcall	_LCDWriteCommand
  2190                           
  2191                           ;LCD.c: 86: LCDWriteCommand(0x32);
  2192  03E3  3032               	movlw	50
  2193  03E4  120A  118A  240B   	fcall	_LCDWriteCommand
  2194  03E7  0008               	return
  2195  03E8                     __end_of_LCDReset:	
  2196                           
  2197                           	psect	text11
  2198  040B                     __ptext11:	
  2199 ;; *************** function _LCDWriteCommand *****************
  2200 ;; Defined at:
  2201 ;;		line 34 in file "LCD.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;  LCDData         1    wreg     unsigned char 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  LCDData         1    5[BANK0 ] unsigned char 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;		None               void
  2208 ;; Registers used:
  2209 ;;		wreg, status,2, status,0, pclath, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2215 ;;      Params:         0       0       0       0       0
  2216 ;;      Locals:         0       1       0       0       0
  2217 ;;      Temps:          0       0       0       0       0
  2218 ;;      Totals:         0       1       0       0       0
  2219 ;;Total ram usage:        1 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    4
  2222 ;; This function calls:
  2223 ;;		_LCDWriteByte
  2224 ;; This function is called by:
  2225 ;;		_main
  2226 ;;		_LCDInitialize
  2227 ;;		_LCDReset
  2228 ;;		_LCDDisplayByte
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           
  2233                           ;psect for function _LCDWriteCommand
  2234  040B                     _LCDWriteCommand:	
  2235                           
  2236                           ;incstack = 0
  2237                           ; Regs used in _LCDWriteCommand: [wreg+status,2+status,0+pclath+cstack]
  2238                           ;LCDWriteCommand@LCDData stored from wreg
  2239  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2240  040C  1303               	bcf	3,6	;RP1=0, select bank0
  2241  040D  00A5               	movwf	LCDWriteCommand@LCDData
  2242                           
  2243                           ;LCD.c: 36: RD2 = 0;
  2244  040E  1108               	bcf	8,2	;volatile
  2245                           
  2246                           ;LCD.c: 37: LCDWriteByte(LCDData);
  2247  040F  0825               	movf	LCDWriteCommand@LCDData,w
  2248  0410  120A  118A  22CA   	fcall	_LCDWriteByte
  2249  0413  0008               	return
  2250  0414                     __end_of_LCDWriteCommand:	
  2251                           
  2252                           	psect	text12
  2253  02CA                     __ptext12:	
  2254 ;; *************** function _LCDWriteByte *****************
  2255 ;; Defined at:
  2256 ;;		line 89 in file "LCD.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  LCDData         1    wreg     unsigned char 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  LCDData         1    4[BANK0 ] unsigned char 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;		None               void
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0, pclath, cstack
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2270 ;;      Params:         0       0       0       0       0
  2271 ;;      Locals:         0       1       0       0       0
  2272 ;;      Temps:          0       2       0       0       0
  2273 ;;      Totals:         0       3       0       0       0
  2274 ;;Total ram usage:        3 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    3
  2277 ;; This function calls:
  2278 ;;		_LCDEnable
  2279 ;; This function is called by:
  2280 ;;		_LCDWriteCommand
  2281 ;;		_LCDWriteData
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _LCDWriteByte
  2287  02CA                     _LCDWriteByte:	
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _LCDWriteByte: [wreg+status,2+status,0+pclath+cstack]
  2291                           ;LCDWriteByte@LCDData stored from wreg
  2292  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  2293  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  2294  02CC  00A4               	movwf	LCDWriteByte@LCDData
  2295                           
  2296                           ;LCD.c: 91: PORTD = (PORTD & 0x0F)|(LCDData & 0xF0);
  2297  02CD  30F0               	movlw	240
  2298  02CE  0524               	andwf	LCDWriteByte@LCDData,w
  2299  02CF  00A2               	movwf	??_LCDWriteByte
  2300  02D0  0808               	movf	8,w	;volatile
  2301  02D1  390F               	andlw	15
  2302  02D2  0422               	iorwf	??_LCDWriteByte,w
  2303  02D3  0088               	movwf	8	;volatile
  2304                           
  2305                           ;LCD.c: 92: LCDEnable();
  2306  02D4  120A  118A  23E8  120A  118A  	fcall	_LCDEnable
  2307                           
  2308                           ;LCD.c: 93: PORTD = (PORTD & 0x0F)|(LCDData << 4);
  2309  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2310  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2311  02DB  0824               	movf	LCDWriteByte@LCDData,w
  2312  02DC  00A2               	movwf	??_LCDWriteByte
  2313  02DD  3004               	movlw	4
  2314  02DE                     u535:	
  2315  02DE  1003               	clrc
  2316  02DF  0DA2               	rlf	??_LCDWriteByte,f
  2317  02E0  3EFF               	addlw	-1
  2318  02E1  1D03               	skipz
  2319  02E2  2ADE               	goto	u535
  2320  02E3  0808               	movf	8,w	;volatile
  2321  02E4  390F               	andlw	15
  2322  02E5  0422               	iorwf	??_LCDWriteByte,w
  2323  02E6  0088               	movwf	8	;volatile
  2324                           
  2325                           ;LCD.c: 94: LCDEnable();
  2326  02E7  120A  118A  23E8  120A  118A  	fcall	_LCDEnable
  2327                           
  2328                           ;LCD.c: 95: _delay((unsigned long)((5)*(20000000/4000.0)));;
  2329  02EC  3021               	movlw	33
  2330  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2331  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2332  02EF  00A3               	movwf	??_LCDWriteByte+1
  2333  02F0  3076               	movlw	118
  2334  02F1  00A2               	movwf	??_LCDWriteByte
  2335  02F2                     u1297:	
  2336  02F2  0BA2               	decfsz	??_LCDWriteByte,f
  2337  02F3  2AF2               	goto	u1297
  2338  02F4  0BA3               	decfsz	??_LCDWriteByte+1,f
  2339  02F5  2AF2               	goto	u1297
  2340  02F6  0000               	nop
  2341  02F7  0008               	return
  2342  02F8                     __end_of_LCDWriteByte:	
  2343                           
  2344                           	psect	text13
  2345  03E8                     __ptext13:	
  2346 ;; *************** function _LCDEnable *****************
  2347 ;; Defined at:
  2348 ;;		line 28 in file "LCD.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;		None               void
  2355 ;; Registers used:
  2356 ;;		wreg
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2362 ;;      Params:         0       0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0
  2364 ;;      Temps:          0       2       0       0       0
  2365 ;;      Totals:         0       2       0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    2
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;;		_LCDWriteByte
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           
  2378                           ;psect for function _LCDEnable
  2379  03E8                     _LCDEnable:	
  2380                           
  2381                           ;LCD.c: 30: RD3 = 1;
  2382                           
  2383                           ;incstack = 0
  2384                           ; Regs used in _LCDEnable: [wreg]
  2385  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2386  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2387  03EA  1588               	bsf	8,3	;volatile
  2388                           
  2389                           ;LCD.c: 31: _delay((unsigned long)((10)*(20000000/4000.0)));;
  2390  03EB  3041               	movlw	65
  2391  03EC  00A1               	movwf	??_LCDEnable+1
  2392  03ED  30EE               	movlw	238
  2393  03EE  00A0               	movwf	??_LCDEnable
  2394  03EF                     u1307:	
  2395  03EF  0BA0               	decfsz	??_LCDEnable,f
  2396  03F0  2BEF               	goto	u1307
  2397  03F1  0BA1               	decfsz	??_LCDEnable+1,f
  2398  03F2  2BEF               	goto	u1307
  2399  03F3  0000               	nop
  2400                           
  2401                           ;LCD.c: 32: RD3 = 0;
  2402  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  2403  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  2404  03F6  1188               	bcf	8,3	;volatile
  2405  03F7  0008               	return
  2406  03F8                     __end_of_LCDEnable:	
  2407                           
  2408                           	psect	text14
  2409  03AC                     __ptext14:	
  2410 ;; *************** function _ISR *****************
  2411 ;; Defined at:
  2412 ;;		line 29 in file "isr.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;		None
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;		None               void
  2419 ;; Registers used:
  2420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2426 ;;      Params:         0       0       0       0       0
  2427 ;;      Locals:         0       0       0       0       0
  2428 ;;      Temps:          4       0       0       0       0
  2429 ;;      Totals:         4       0       0       0       0
  2430 ;;Total ram usage:        4 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    1
  2433 ;; This function calls:
  2434 ;;		_USARTHandleRxInt
  2435 ;; This function is called by:
  2436 ;;		Interrupt level 1
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           
  2441                           ;psect for function _ISR
  2442  03AC                     _ISR:	
  2443                           
  2444                           ;isr.c: 31: if (RCIE && RCIF) {
  2445  03AC  1683               	bsf	3,5	;RP0=1, select bank1
  2446  03AD  1303               	bcf	3,6	;RP1=0, select bank1
  2447  03AE  1E8C               	btfss	12,5	;volatile
  2448  03AF  2BB9               	goto	i1l188
  2449  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2450  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2451  03B2  1E8C               	btfss	12,5	;volatile
  2452  03B3  2BB9               	goto	i1l188
  2453                           
  2454                           ;isr.c: 32: USARTHandleRxInt();
  2455  03B4  120A  118A  220C  120A  118A  	fcall	_USARTHandleRxInt
  2456  03B9                     i1l188:	
  2457                           ;isr.c: 33: return;
  2458                           
  2459  03B9  0878               	movf	??_ISR+3,w
  2460  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2461  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  2462  03BC  00FF               	movwf	127
  2463  03BD  0877               	movf	??_ISR+2,w
  2464  03BE  008A               	movwf	10
  2465  03BF  0876               	movf	??_ISR+1,w
  2466  03C0  0084               	movwf	4
  2467  03C1  0E75               	swapf	??_ISR^(0+-128),w
  2468  03C2  0083               	movwf	3
  2469  03C3  0EFE               	swapf	126,f
  2470  03C4  0E7E               	swapf	126,w
  2471  03C5  0009               	retfie
  2472  03C6                     __end_of_ISR:	
  2473                           
  2474                           	psect	intentry
  2475  0004                     __pintentry:	
  2476                           ;incstack = 0
  2477                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2478                           
  2479  0004                     interrupt_function:	
  2480  007E                     saved_w	set	btemp
  2481  0004  00FE               	movwf	btemp
  2482  0005  0E03               	swapf	3,w
  2483  0006  00F5               	movwf	??_ISR
  2484  0007  0804               	movf	4,w
  2485  0008  00F6               	movwf	??_ISR+1
  2486  0009  080A               	movf	10,w
  2487  000A  00F7               	movwf	??_ISR+2
  2488  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2489  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2490  000D  087F               	movf	btemp+1,w
  2491  000E  00F8               	movwf	??_ISR+3
  2492  000F  120A  118A  2BAC   	ljmp	_ISR
  2493                           
  2494                           	psect	text15
  2495  020C                     __ptext15:	
  2496 ;; *************** function _USARTHandleRxInt *****************
  2497 ;; Defined at:
  2498 ;;		line 93 in file "usart_pic16.c"
  2499 ;; Parameters:    Size  Location     Type
  2500 ;;		None
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  data            1    4[COMMON] unsigned char 
  2503 ;; Return value:  Size  Location     Type
  2504 ;;		None               void
  2505 ;; Registers used:
  2506 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2507 ;; Tracked objects:
  2508 ;;		On entry : 0/0
  2509 ;;		On exit  : 0/0
  2510 ;;		Unchanged: 0/0
  2511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2512 ;;      Params:         0       0       0       0       0
  2513 ;;      Locals:         1       0       0       0       0
  2514 ;;      Temps:          4       0       0       0       0
  2515 ;;      Totals:         5       0       0       0       0
  2516 ;;Total ram usage:        5 bytes
  2517 ;; Hardware stack levels used:    1
  2518 ;; This function calls:
  2519 ;;		Nothing
  2520 ;; This function is called by:
  2521 ;;		_ISR
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           
  2526                           ;psect for function _USARTHandleRxInt
  2527  020C                     _USARTHandleRxInt:	
  2528                           
  2529                           ;usart_pic16.c: 95: if(RB1==1)
  2530                           
  2531                           ;incstack = 0
  2532                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
  2533  020C  1283               	bcf	3,5	;RP0=0, select bank0
  2534  020D  1303               	bcf	3,6	;RP1=0, select bank0
  2535  020E  1C86               	btfss	6,1	;volatile
  2536  020F  2A12               	goto	i1l53
  2537                           
  2538                           ;usart_pic16.c: 96: RB1=0;
  2539  0210  1086               	bcf	6,1	;volatile
  2540  0211  2A13               	goto	i1l1266
  2541  0212                     i1l53:	
  2542                           
  2543                           ;usart_pic16.c: 97: else
  2544                           ;usart_pic16.c: 98: RB1=1;
  2545  0212  1486               	bsf	6,1	;volatile
  2546  0213                     i1l1266:	
  2547                           
  2548                           ;usart_pic16.c: 101: char data=RCREG;
  2549  0213  081A               	movf	26,w	;volatile
  2550  0214  00F0               	movwf	??_USARTHandleRxInt
  2551  0215  0870               	movf	??_USARTHandleRxInt,w
  2552  0216  00F4               	movwf	USARTHandleRxInt@data
  2553                           
  2554                           ;usart_pic16.c: 104: if(((UQEnd==64-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  2555  0217  303F               	movlw	63
  2556  0218  0679               	xorwf	_UQEnd,w	;volatile
  2557  0219  1903               	btfsc	3,2
  2558  021A  087A               	movf	_UQFront,w	;volatile
  2559  021B  1903               	btfsc	3,2
  2560  021C  2A32               	goto	i1l1274
  2561  021D  087A               	movf	_UQFront,w	;volatile
  2562  021E  00F0               	movwf	??_USARTHandleRxInt
  2563  021F  01F1               	clrf	??_USARTHandleRxInt+1
  2564  0220  1BF0               	btfsc	??_USARTHandleRxInt,7
  2565  0221  03F1               	decf	??_USARTHandleRxInt+1,f
  2566  0222  3001               	movlw	1
  2567  0223  0779               	addwf	_UQEnd,w	;volatile
  2568  0224  00F2               	movwf	??_USARTHandleRxInt+2
  2569  0225  01F3               	clrf	??_USARTHandleRxInt+3
  2570  0226  1803               	skipnc
  2571  0227  0AF3               	incf	??_USARTHandleRxInt+3,f
  2572  0228  1BF9               	btfsc	_UQEnd,7	;volatile
  2573  0229  03F3               	decf	??_USARTHandleRxInt+3,f
  2574  022A  0871               	movf	??_USARTHandleRxInt+1,w
  2575  022B  0673               	xorwf	??_USARTHandleRxInt+3,w
  2576  022C  1D03               	skipz
  2577  022D  2A30               	goto	u60_25
  2578  022E  0870               	movf	??_USARTHandleRxInt,w
  2579  022F  0672               	xorwf	??_USARTHandleRxInt+2,w
  2580  0230                     u60_25:	
  2581  0230  1D03               	skipz
  2582  0231  2A3A               	goto	i1l1278
  2583  0232                     i1l1274:	
  2584                           
  2585                           ;usart_pic16.c: 105: {
  2586                           ;usart_pic16.c: 107: UQFront++;
  2587  0232  3001               	movlw	1
  2588  0233  00F0               	movwf	??_USARTHandleRxInt
  2589  0234  0870               	movf	??_USARTHandleRxInt,w
  2590  0235  07FA               	addwf	_UQFront,f	;volatile
  2591                           
  2592                           ;usart_pic16.c: 108: if(UQFront==64) UQFront=0;
  2593  0236  3040               	movlw	64
  2594  0237  067A               	xorwf	_UQFront,w	;volatile
  2595  0238  1903               	btfsc	3,2
  2596  0239  01FA               	clrf	_UQFront	;volatile
  2597  023A                     i1l1278:	
  2598                           
  2599                           ;usart_pic16.c: 109: }
  2600                           ;usart_pic16.c: 111: if(UQEnd==64-1)
  2601  023A  303F               	movlw	63
  2602  023B  0679               	xorwf	_UQEnd,w	;volatile
  2603  023C  1D03               	btfss	3,2
  2604  023D  2A40               	goto	i1l1282
  2605                           
  2606                           ;usart_pic16.c: 112: UQEnd=0;
  2607  023E  01F9               	clrf	_UQEnd	;volatile
  2608  023F  2A44               	goto	i1l1284
  2609  0240                     i1l1282:	
  2610                           
  2611                           ;usart_pic16.c: 113: else
  2612                           ;usart_pic16.c: 114: UQEnd++;
  2613  0240  3001               	movlw	1
  2614  0241  00F0               	movwf	??_USARTHandleRxInt
  2615  0242  0870               	movf	??_USARTHandleRxInt,w
  2616  0243  07F9               	addwf	_UQEnd,f	;volatile
  2617  0244                     i1l1284:	
  2618                           
  2619                           ;usart_pic16.c: 116: URBuff[UQEnd]=data;
  2620  0244  0874               	movf	USARTHandleRxInt@data,w
  2621  0245  00F0               	movwf	??_USARTHandleRxInt
  2622  0246  0879               	movf	_UQEnd,w
  2623  0247  3EA0               	addlw	(low (_URBuff| 0))& (0+255)
  2624  0248  0084               	movwf	4
  2625  0249  0870               	movf	??_USARTHandleRxInt,w
  2626  024A  1383               	bcf	3,7	;select IRP bank1
  2627  024B  0080               	movwf	0
  2628                           
  2629                           ;usart_pic16.c: 118: if(UQFront==-1) UQFront=0;
  2630  024C  0A7A               	incf	_UQFront,w	;volatile
  2631  024D  1D03               	btfss	3,2
  2632  024E  0008               	return
  2633  024F  01FA               	clrf	_UQFront	;volatile
  2634  0250  0008               	return
  2635  0251                     __end_of_USARTHandleRxInt:	
  2636  007E                     btemp	set	126	;btemp
  2637  007E                     wtemp	set	126
  2638  007E                     wtemp0	set	126
  2639  0080                     wtemp1	set	128
  2640  0082                     wtemp2	set	130
  2641  0084                     wtemp3	set	132
  2642  0086                     wtemp4	set	134
  2643  0088                     wtemp5	set	136
  2644  007F                     wtemp6	set	127
  2645  007E                     ttemp	set	126
  2646  007E                     ttemp0	set	126
  2647  0081                     ttemp1	set	129
  2648  0084                     ttemp2	set	132
  2649  0087                     ttemp3	set	135
  2650  007F                     ttemp4	set	127
  2651  007E                     ltemp	set	126
  2652  007E                     ltemp0	set	126
  2653  0082                     ltemp1	set	130
  2654  0086                     ltemp2	set	134
  2655  0080                     ltemp3	set	128


Data Sizes:
    Strings     43
    Constant    0
    Data        10
    BSS         69
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     44      59
    BANK1            80      0      64
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 10
		 -> main@p(BANK0[10]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 10
		 -> main@m(BANK0[10]), 

    LCDWriteString@lcd_string	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    USARTWriteString@str	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_4(CODE[8]), STR_3(CODE[3]), main@m(BANK0[10]), STR_2(CODE[27]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    _main->_LCDWriteString
    _USARTWriteString->_USARTWriteChar
    _LCDWriteString->_LCDWriteData
    _LCDWriteData->_LCDWriteByte
    _LCDInitialize->_LCDWriteCommand
    _LCDReset->_LCDWriteCommand
    _LCDWriteCommand->_LCDWriteByte
    _LCDWriteByte->_LCDEnable

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                36    36      0    1679
                                              8 BANK0     36    36      0
                          _LCDEnable
                      _LCDInitialize
                    _LCDWriteCommand
                       _LCDWriteData
                     _LCDWriteString
                 _USARTDataAvailable
                          _USARTInit
                      _USARTReadData
                     _USARTWriteChar
                   _USARTWriteString
                            _strncmp
 ---------------------------------------------------------------------------------
 (1) _strncmp                                              6     3      3     267
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _USARTWriteString                                     2     0      2     332
                                              1 BANK0      2     0      2
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (2) _USARTWriteChar                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USARTReadData                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTInit                                            3     1      2      75
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _USARTDataAvailable                                   1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       2     2      0     138
                                              6 BANK0      2     2      0
                       _LCDWriteData
 ---------------------------------------------------------------------------------
 (2) _LCDWriteData                                         1     1      0      66
                                              5 BANK0      1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDInitialize                                        1     1      0     132
                                              6 BANK0      1     1      0
                           _LCDReset
                    _LCDWriteCommand
 ---------------------------------------------------------------------------------
 (2) _LCDReset                                             0     0      0      66
                    _LCDWriteCommand
 ---------------------------------------------------------------------------------
 (1) _LCDWriteCommand                                      1     1      0      66
                                              5 BANK0      1     1      0
                       _LCDWriteByte
 ---------------------------------------------------------------------------------
 (3) _LCDWriteByte                                         3     3      0      44
                                              2 BANK0      3     3      0
                          _LCDEnable
 ---------------------------------------------------------------------------------
 (4) _LCDEnable                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0      23
                                              5 COMMON     4     4      0
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (7) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDEnable
   _LCDInitialize
     _LCDReset
       _LCDWriteCommand
         _LCDWriteByte
           _LCDEnable
     _LCDWriteCommand
       _LCDWriteByte
         _LCDEnable
   _LCDWriteCommand
     _LCDWriteByte
       _LCDEnable
   _LCDWriteData
     _LCDWriteByte
       _LCDEnable
   _LCDWriteString
     _LCDWriteData
       _LCDWriteByte
         _LCDEnable
   _USARTDataAvailable
   _USARTInit
   _USARTReadData
   _USARTWriteChar
   _USARTWriteString
     _USARTWriteChar
   _strncmp

 _ISR (ROOT)
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      40       7       80.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      86      12        0.0%
ABS                  0      0      86       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Mar 22 14:48:14 2016

                          pc 0002                  __CFG_CP$OFF 0000                           l31 01FA  
                         l38 041F                           fsr 0004           USARTInit@baud_rate 0020  
   LCDWriteString@lcd_string 0027         ??_USARTDataAvailable 0020                          l690 0254  
                        _GIE 005F                          _RB1 0031                          _RD2 0042  
                        _RC4 003C                          _RD3 0043                 __CFG_CPD$OFF 0000  
                        _ISR 03AC                          u535 02DE                          u840 0042  
                        u945 017F                          u955 0197               ?_USARTReadData 0070  
                        fsr0 0004                          indf 0000                 __CFG_IESO$ON 0000  
               __CFG_FOSC$HS 0000               ?_LCDInitialize 0070                 __CFG_LVP$OFF 0000  
                       ?_ISR 0070                         l1230 01D0                         l1302 035F  
                       l1232 01D2                         l1226 01CC                         l1306 0367  
                       l1332 038A                         l1324 037D                         l1316 036E  
                       l1228 01CE                         l1236 01D7                         l1260 0321  
                       l1510 0127                         l1502 0111                         l1360 038F  
                       l1506 0119                         l1372 0283                         l1532 0181  
                       l1540 019F                         l1374 028C                         l1296 034B  
                       l1368 026F                         l1480 00C0                         l1538 0199  
                       l1494 00F2                         l1760 01F0                         l1762 01F5  
                       l1756 01E6                         l1758 01EB                         STR_1 02BA  
                       STR_2 029F                         STR_3 02B7                         STR_4 02C2  
                       u1307 03EF                         u1247 0070                         u1257 0084  
                       u1267 0099                         u1277 00B9                         u1287 0108  
                       u1297 02F2                         _PEIE 005E                         _RCIE 0465  
                       _RCIF 0065                         i1l53 0212                 __CFG_WRT$OFF 0000  
     __end_of_USARTWriteChar 0424                __CFG_FCMEN$ON 0000           __size_of_LCDEnable 0010  
                       _main 0032                         btemp 007E            USARTReadData@data 0021  
              __CFG_BOREN$ON 0000                         ltemp 007E                         start 0012  
                       ttemp 007E                         wtemp 007E                __CFG_MCLRE$ON 0000  
                      ??_ISR 0075                ?_LCDWriteData 0070            ?_USARTHandleRxInt 0070  
              ?_LCDWriteByte 0070             __end_of_LCDReset 03E8                        ?_main 0070  
         ??_USARTHandleRxInt 0070                __CFG_WDTE$OFF 0000             USARTWriteChar@ch 0020  
                      i1l188 03B9                        _RCREG 001A                        _SPBRG 0099  
                      _PORTD 0008                        u60_25 0230                        _TRISD 0088  
                      _TXREG 0019                        _UQEnd 0079                __CFG_PWRTE$ON 0000  
                      main@i 0040                        main@j 0045                        main@k 0049  
                      main@m 0036                        main@n 0042                        main@p 002C  
                      main@x 0047                        pclath 000A                        ltemp0 007E  
                      ltemp1 0082                        ltemp2 0086                        ltemp3 0080  
         __size_of_USARTInit 0048              ?_USARTWriteChar 0070                        ttemp0 007E  
                      ttemp1 0081                        ttemp2 0084                        ttemp3 0087  
                      ttemp4 007F                        status 0003                        wtemp0 007E  
                      wtemp1 0080                        wtemp2 0082                        wtemp3 0084  
                      wtemp4 0086                        wtemp5 0088                        wtemp6 007F  
            __end_of_strncmp 028F            ??_LCDWriteCommand 0025              __initialization 0015  
               __end_of_main 01C4               ??_LCDWriteData 0025               ??_LCDWriteByte 0022  
            ??_USARTReadData 0020            __end_of_LCDEnable 03F8                       ??_main 0028  
            ??_LCDInitialize 0026                       i1l1282 0240                       i1l1274 0232  
                     i1l1266 0213                       i1l1284 0244                       i1l1278 023A  
                     _URBuff 00A0               _LCDWriteString 038C     __end_of_USARTWriteString 0346  
          __end_of_USARTInit 020C                       main@ch 004B                       saved_w 007E  
                  ??_strncmp 0023      __end_of__initialization 002E                    ?_LCDReset 0070  
     __end_of_LCDWriteString 03AC               __pcstackCOMMON 0070                 __pidataBANK0 03F8  
       __end_of_LCDWriteData 040B                   __pbssBANK0 0056                   __pbssBANK1 00A0  
       __end_of_LCDWriteByte 02F8                   ??_LCDReset 0026                   __pnvCOMMON 0079  
            ?_LCDWriteString 0070                   __pmaintext 0032          LCDWriteByte@LCDData 0024  
                 __pintentry 0004  __size_of_USARTDataAvailable 0023             ??_USARTWriteChar 0020  
         USARTWriteInt@F1700 0056    __size_of_USARTHandleRxInt 0045              _LCDWriteCommand 040B  
                 __stringtab 028F                      _UQFront 007A       LCDWriteCommand@LCDData 0025  
                    __ptext1 0251                      __ptext2 0321                      __ptext3 041C  
                    __ptext4 0346                      __ptext5 01C4                      __ptext6 0369  
                    __ptext7 038C                      __ptext8 0402                      __ptext9 02F8  
               __size_of_ISR 001A                    _LCDEnable 03E8                      clrloop0 0415  
                    _strncmp 0251         end_of_initialization 002E                    _RCSTAbits 0018  
          ?_USARTWriteString 0021                    _PORTCbits 0007        __end_of_USARTReadData 0369  
         ??_USARTWriteString 0023      __end_of_LCDWriteCommand 0414        __size_of_LCDWriteData 0009  
      __end_of_LCDInitialize 0321                   ?_LCDEnable 0070                    _USARTInit 01C4  
      __size_of_LCDWriteByte 002E                    _TRISCbits 0087                    _TXSTAbits 0098  
          __size_of_LCDReset 0011                 _LCDWriteData 0402                 _LCDWriteByte 02CA  
        start_initialization 0015                   ?_USARTInit 0020                  __end_of_ISR 03C6  
           _USARTHandleRxInt 020C             ??_LCDWriteString 0026                   init_fetch0 03C6  
                __pdataBANK0 004C             ?_LCDWriteCommand 0070                  ??_LCDEnable 0020  
                  ___latbits 0002                __pcstackBANK0 0020   __end_of_USARTDataAvailable 038C  
                  __pstrings 028F                  ??_USARTInit 0022                     ?_strncmp 0020  
          interrupt_function 0004                     _LCDReset 03D7                    clear_ram0 0414  
                   _PIR1bits 000C                    main@F2190 004C                  __stringbase 029E  
                  main@mflag 0043    __size_of_USARTWriteString 0025      __size_of_USARTWriteChar 0008  
   __end_of_USARTHandleRxInt 0251           __end_of__stringtab 029F                     __ptext10 03D7  
                   __ptext11 040B                     __ptext12 02CA                     __ptext13 03E8  
                   __ptext14 03AC                     __ptext15 020C            __CFG_BOR4V$BOR21V 0000  
           __size_of_strncmp 003E                __size_of_main 0192                   strncmp@len 0021  
     __size_of_USARTReadData 0023       __size_of_LCDInitialize 0029                     init_ram0 03CA  
                   intlevel1 0000                    strncmp@s1 0025                    strncmp@s2 0020  
                  stringcode 0299          USARTWriteString@str 0021                _USARTReadData 0346  
       USARTHandleRxInt@data 0074                     stringdir 0299                     stringtab 028F  
              _LCDInitialize 02F8           _USARTDataAvailable 0369             _USARTWriteString 0321  
   __size_of_LCDWriteCommand 0009          LCDWriteData@LCDData 0025          ?_USARTDataAvailable 0070  
             _USARTWriteChar 041C      __size_of_LCDWriteString 0020  
